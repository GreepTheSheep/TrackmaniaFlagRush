// #RequireContext CSmMlScriptIngame

#Include	"MathLib" as ML
#Include	"ColorLib" as CL
#Include	"Libs/Zrx/FlagRush/UI/Shared.Script.txt" as Shared
#Include "Libs/Zrx/FlagRush/FlagRush_Common.Script.txt" as FlagRush_Common

#Const		C_ScoresTable_FlagsScoredKey				"flags-scored"
#Const		C_ScoresTable_FlagsScoredRoundKey			"flags-scored-round"
#Const		C_ScoresTable_FlagsStolenKey				"flags-stolen"
#Const		C_ScoresTable_FlagsStolenRoundKey			"flags-stolen-round"
#Const		C_ScoresTable_PointsKey						"points"
#Const		C_ScoresTable_PointsRoundKey				"points-round"

Text GetManialink(Integer _PlayersPerPage) {
	declare PlayersPerPage = ML::Clamp(_PlayersPerPage, 1, 6);
	
	// Create Text with XML Frame instances to insert in manialink text
	declare Text PlayerCardFrameInstancesTeam1Xml;
	declare Text PlayerCardFrameInstancesTeam2Xml;
	for(I, 1, PlayersPerPage) {
		PlayerCardFrameInstancesTeam1Xml ^= """
		<frameinstance modelid="player-card-left" pos="-68 {{{-(5+(I-1)*6.5)}}}" id="player-card-team1-{{{I}}}" hidden="1" />
		""";
		PlayerCardFrameInstancesTeam2Xml ^= """
		<frameinstance modelid="player-card-right" pos="5 {{{-(5+(I-1)*6.5)}}}" id="player-card-team2-{{{I}}}" hidden="1" />
		""";
	}
	declare Text PlayerCardFrameInstancesXml = """
	{{{PlayerCardFrameInstancesTeam1Xml}}}
	{{{PlayerCardFrameInstancesTeam2Xml}}}
	""";
	
	// Create Strings with Maniascript arrays to insert in manialink script text
	declare Text PlayerCardFramesTeam1ScriptList = "[";
	declare Text PlayerCardFramesTeam2ScriptList = "[";
	for(I, 1, PlayersPerPage) {
		PlayerCardFramesTeam1ScriptList ^= """
		Page.GetFirstChild("player-card-team1-{{{I}}}") as CMlFrame""";
		
		PlayerCardFramesTeam2ScriptList ^= """
		Page.GetFirstChild("player-card-team2-{{{I}}}") as CMlFrame""";
		
		if(I < PlayersPerPage) {
			PlayerCardFramesTeam1ScriptList ^= ",";
			PlayerCardFramesTeam2ScriptList ^= ",";
		}
		else {
			PlayerCardFramesTeam1ScriptList ^= "]";
			PlayerCardFramesTeam2ScriptList ^= "]";		
		}
	}
	
	// Build the actual manialink and return it
	declare MLText = """
	<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
	<manialink version="3" name="FlagRush_ScoresTable">
	<stylesheet>
	<style class="legend"  textfont="RobotoCondensed" rot="-5" />
	</stylesheet>
	<framemodel id="player-card-left">
	<quad pos="0 0" z-index="-1" size="64 6" opacity="0.5" id="background" valign="center" style="UICommon64_1" substyle="BgFrame2" colorize="006" halign="left"/>
	<quad pos="0 0" z-index="1" size="6 6" bgcolor="FFF" valign="center" id="avatar" halign="left"/>
	<label pos="7 0" z-index="1" size="30 5" text="Player Name" halign="left" textsize="1" id="name" textfont="GameFontRegular" valign="center2" />
	<label pos="42 2.5" z-index="1" size="9 3" text="0" halign="center" textsize="2" id="points" valign="top" />
	<label pos="51 2.5" z-index="1" size="9 3" text="0" valign	="top" halign="center" textsize="2" id="flags-scored" />
	<label pos="60 2.5" z-index="1" size="9 3" text="0" valign="top" halign="center" textsize="2" id="flags-stolen" />
	<label pos="42 -3" z-index="1" size="9 3" text="0"  halign="center" textsize="0.1" id="points-add" valign="bottom" textprefix="$fff+" />
	<label pos="51 -3" z-index="1" size="9 3" text="0" valign="bottom" halign="center" textsize="0.1" id="flags-scored-add" textprefix="$fff+" />
	<label pos="60 -3" z-index="1" size="9 3" text="0" valign="bottom" halign="center" textsize="0.1" id="flags-stolen-add" textprefix="$fff+" />
	<quad pos="42 0" z-index="1" size="8 6" opacity="0.4" id="background" halign="center" valign="center" style="UICommon64_1" substyle="BgFrame1" colorize="000"/>
	<quad pos="51 0" z-index="1" size="8 6" opacity="0.4" id="background" halign="center" valign="center" style="UICommon64_1" substyle="BgFrame1" colorize="000"/>
	<quad pos="60 0" z-index="1" size="8 6" opacity="0.4" id="background" halign="center" valign="center" style="UICommon64_1" substyle="BgFrame1" colorize="000"/>
	<quad pos="36 0" z-index="2" size="3 3" halign="center" valign="center" id="info-icon" style="Icons64x64_2" substyle="Disconnected" hidden="1" /> <!-- Style="UICommon64_1" SubStyle="Camera_light" -->
	</framemodel>
	<framemodel id="player-card-right">
	<quad pos="0 0" z-index="-1" size="64 6" opacity="0.5" id="background" valign="center" style="UICommon64_1" substyle="BgFrame2" colorize="300" halign="left"/>
	<quad pos="0 0" z-index="1" size="6 6" bgcolor="FFF" valign="center" id="avatar" halign="left"/>
	<label pos="7 0" z-index="1" size="30 5" text="Player Name" halign="left" textsize="1" id="name" textfont="GameFontRegular" valign="center2" />
	<label pos="42 2.5" z-index="1" size="9 3" text="0" halign="center" textsize="2" id="points" valign="top" />
	<label pos="51 2.5" z-index="1" size="9 3" text="0" valign="top" halign="center" textsize="2" id="flags-scored" />
	<label pos="60 2.5" z-index="1" size="9 3" text="0" valign="top" halign="center" textsize="2" id="flags-stolen" />
	<label pos="42 -3" z-index="1" size="9 3" text="0"  halign="center" textsize="0.1" id="points-add" valign="bottom" textprefix="$fff+" />
	<label pos="51 -3" z-index="1" size="9 3" text="0" valign="bottom" halign="center" textsize="0.1" id="flags-scored-add" textprefix="$fff+" />
	<label pos="60 -3" z-index="1" size="9 3" text="0" valign="bottom" halign="center" textsize="0.1" id="flags-stolen-add" textprefix="$fff+" />
	<quad pos="42 0" z-index="1" size="8 6" opacity="0.4" id="background" halign="center" valign="center" style="UICommon64_1" substyle="BgFrame1" colorize="000"/>
	<quad pos="51 0" z-index="1" size="8 6" opacity="0.4" id="background" halign="center" valign="center" style="UICommon64_1" substyle="BgFrame1" colorize="000"/>
	<quad pos="60 0" z-index="1" size="8 6" opacity="0.4" id="background" halign="center" valign="center" style="UICommon64_1" substyle="BgFrame1" colorize="000"/>
	<quad pos="36 0" id="info-icon" z-index="2" size="3 3" halign="center" valign="center" style="Icons64x64_2" substyle="Disconnected" hidden="1" /> <!-- Style="UICommon64_1" SubStyle="Camera_light" -->
	</framemodel>
	<!-- Actual scoreboard -->
	<!--
	Structure:
	
	scoreboard-main (Frame)
	teamscores-round (Frame)
	for each team: team name, roundscore, colored score background
	divider
	playerscores (Frame)
	column-legend (Frame)
	playergrid (Frame)
	4x player-card-team1 (Frameinstance)
	4x player-card-team2 (Frameinstance)
	-->
	<frame id="scoreboard-main" scale="1.4" pos="0 43" valign="bottom">
	<frame id="body" pos="0 0">
	<frame id="header">
	<frame id="logo" pos="0 -4" size="280 15" scale="0.5" valign="center" halign="center" z-index="-1">
	<!-- logo -->
	<frame id="text" pos="0 -0.5">
	<label pos="-2 -4" z-index="0" size="20 10" text="$iRUSH" textemboss="1" textfont="RobotoCondensedBold" halign="left" valign="center2" textsize="6"/>
	<quad pos="0 1" z-index="0" size="18.1 18.1"  style="UIConstruction_Buttons" substyle="Validate" halign="center" valign="center" rot="-17"/>
	<label pos="2 0" z-index="0" size="20 10" text="$iFLAG" halign="right" valign="center2" textsize="6" textemboss="1" textfont="RobotoCondensedBold"/>
	</frame>
	<!-- background -->
	<frame id="background" rot="71" valign="center" halign="center">
	<quad pos="0 0" size="0.5 300" bgcolor="000" opacity="1" halign="center" valign="center"/>
	<quad pos="35 0" size="70 400" bgcolor="900" opacity="0.7" halign="center" valign="center" id="team2-score-background2"/>
	<quad pos="-35 0" size="70 400" bgcolor="00b" opacity="0.7" halign="center" valign="center" id="team1-score-background2"/>
	</frame>
	</frame>
	<quad id="team1-score-background" pos="-18 0" z-index="0" size="12 8" style="UICommon64_1" substyle="BgFrame1" colorize="000" halign="center" valign="top" opacity="0.5"/>
	<quad id="team2-score-background" pos="20 0" z-index="0" size="12 8" halign="center" style="UICommon64_1" substyle="BgFrame1" colorize="000" opacity="0.5"/>
	<label pos="-18 -4" z-index="2" size="12 8" text="0" halign="center" valign="center2" textsize="	5" id="team1-score" textfont="GameFontBlack" />
	<label pos="20 -4" z-index="2" size="12 10" text="0" halign="center" valign="center2" textsize="5" id="team2-score" textfont="GameFontBlack"/>
	<label pos="-47 -4" z-index="1" size="46 8" text="Team 1" halign="center" textsize="4" id="team1-name" textfont="GameFontRegular" valign="center2"/>
	<label pos="46 -4" z-index="1" size="48 10" text="Team 2" valign="center2" halign="center" textsize="4" id="team2-name" textfont="GameFontRegular"/>				
	</frame>
	<frame id="column-legend" pos="0 -10">
	<frame id="team1" pos="-68 0">
	<label class="legend" pos="42 0" z-index="1" size="10 5" text="Points"  valign="center" halign="center" textsize="0.1" />
	<label class="legend" pos="51 0" z-index="1" size="10 5" text="  Scored" valign="center" halign="center" textsize="0.1"/>
	<label class="legend" pos="60 0" z-index="1" size="10 5" text="  Stolen"  valign="center" halign="center" textsize="0.1" />
	</frame>
	<frame id="team2" pos="5 0">
	<label class="legend" pos="42 0" z-index="1" size="10 5" text="Points" valign="center" halign="center" textsize="0.1" />
	<label class="legend" pos="51 0" z-index="1" size="10 5" text="  Scored" valign="center" halign="center" textsize="0.1" />
	<label class="legend" pos="60 0" z-index="1" size="10 5" text="  Stolen"  valign="center" halign="center" textsize="0.1" />
	</frame>
	</frame>
	<!-- column legend -->
	<frame id="page-controls" pos="0 -53" z-index="2">
	<quad pos="0 0" z-index="1" size="3 3" halign="right" valign="center" style="UICommon64_2" substyle="ArrowUpSlim_light" scriptevents="1" id="page-previous"/>
	<quad pos="0 0" z-index="1" size="3 3" halign="left" style="UICommon64_2" substyle="ArrowDownSlim_light" scriptevents="1" id="page-next" valign="center"/>
	<quad pos="0 1.5" z-index="0" size="280 6" bgcolor="000" opacity="0.4" halign="center" valign="top" style="UICommon64_1" substyle="BgFrame1" colorize="000" scale="0.5"/>
	</frame>
	<frame id="playergrid" pos="0 -9">
	{{{PlayerCardFrameInstancesXml}}}
	</frame>			
	<frame valign="top" halign="center" size="140 42" pos="0 -9">				
	<quad id="team2-background" pos="1 0" size="0.5 50" bgcolor="000" opacity="0.6" halign="left" />	
	<quad pos="1 0" size="70 50"  bgcolor="000a" halign="left" />
	
	<quad id="team1-background" pos="-1 0" size="0.5 50" bgcolor="000" opacity="0.6" halign="right" />				
	<quad pos="-1 0" size="70 50" bgcolor="000a" halign="right" />
	</frame>
	</frame>
	<!-- body -->
	<frame id="footer" pos="0 {{{- (16 + (PlayersPerPage * 6.5))}}}">
	<label pos="0 -1.5" z-index="0" size="140 4" text="FooterText" halign="center" valign="center2" textsize="1" textfont="GameFontRegular" id="text"/>			
	</frame>
	</frame>
	
	<!-- Script to handle the scoreboard -->
	
	<script><!--
	#Include "TextLib" as TL
	#Include "MathLib" as ML
	#Include "ColorLib" as CL
	
	{{{Shared::GetTeamColorNetreadFunctions()}}}
	
	
	CSmPlayer GetPlayer(Text Login) {
		foreach (Player in Players) {
			if (Player.User.Login == Login) {
				return Player;
			}			
		}
		return Null;
	}
	
	Boolean isConnected(Text Login) {
		foreach (Player in Players) {
			if (Player.User.Login == Login) return True;
		}
		return False;
	}

	main() {
		
		/* CMlControl references */
		
		// Header
		declare CMlQuad QuadTeam1ScoreBackground = (Page.GetFirstChild("team1-score-background") as CMlQuad);
		declare CMlQuad QuadTeam2ScoreBackground = (Page.GetFirstChild("team2-score-background") as CMlQuad);
		declare CMlQuad QuadTeam1ScoreBackground2 = (Page.GetFirstChild("team1-score-background2") as CMlQuad);
		declare CMlQuad QuadTeam2ScoreBackground2 = (Page.GetFirstChild("team2-score-background2") as CMlQuad);
		declare CMlQuad QuadTeam1Background = (Page.GetFirstChild("team1-background") as CMlQuad);
		declare CMlQuad QuadTeam2Background = (Page.GetFirstChild("team2-background") as CMlQuad);
		declare CMlLabel LabelTeam1Score = (Page.GetFirstChild("team1-score") as CMlLabel);
		declare CMlLabel LabelTeam2Score = (Page.GetFirstChild("team2-score") as CMlLabel);
		declare CMlLabel LabelTeam1Name = (Page.GetFirstChild("team1-name") as CMlLabel);
		declare CMlLabel LabelTeam2Name = (Page.GetFirstChild("team2-name") as CMlLabel);
		
		// Body
		declare CMlFrame[] PlayerCardFramesTeam1 = {{{PlayerCardFramesTeam1ScriptList}}};
		declare CMlFrame[] PlayerCardFramesTeam2 = {{{PlayerCardFramesTeam2ScriptList}}};
		
		declare CMlFrame FramePageControls = (Page.GetFirstChild("page-controls") as CMlFrame);
		declare CMlQuad QuadPagePrevious = (Page.GetFirstChild("page-previous") as CMlQuad);
		declare CMlQuad QuadPageNext = (Page.GetFirstChild("page-next") as CMlQuad);
		
		// Footer
		declare CMlFrame FrameFooter = (Page.GetFirstChild("footer") as CMlFrame);
		declare CMlLabel LabelFooter = (FrameFooter.GetFirstChild("text") as CMlLabel);
		
		/* Init some controls */
		
		LabelTeam1Name.Value = Teams[0].Name;
		LabelTeam2Name.Value = Teams[1].Name;
		QuadTeam1ScoreBackground.Colorize = GetTeamPrimaryColor(Teams[0]);
		QuadTeam2ScoreBackground.Colorize = GetTeamPrimaryColor(Teams[1]);
		
		declare Vec3 BgColor1 = CL::RgbToHsv(GetTeamPrimaryColor(Teams[0]));			
		declare Vec3 BgColor2 = CL::RgbToHsv(GetTeamPrimaryColor(Teams[1]));
		BgColor1.Z /= 3;
		BgColor2.Z /= 3;
		
		QuadTeam1ScoreBackground2.BgColor = CL::HsvToRgb(BgColor1);
		QuadTeam2ScoreBackground2.BgColor = CL::HsvToRgb(BgColor2);
		
		QuadTeam1Background.BgColor = GetTeamPrimaryColor(Teams[0]);
		QuadTeam2Background.BgColor = GetTeamPrimaryColor(Teams[1]);
		
		/* Netread variables */
		
		// Same as scores header
		declare netread Integer Net_Team1RoundScore for UI;
		declare netread Integer Net_Team2RoundScore for UI;
		declare netread Integer Net_Team1MapScore for UI;			// Not used (yet)
		declare netread Integer Net_Team2MapScore for UI;			// Not used (yet)
		declare netread Integer Net_NbMapsToWinMatch for UI;		// Not used (yet)
		declare netread Integer Net_ScoreBoardUpdateStamp for UI;
		
		// Scoreboard data
		
		// Looks scary, but: ClanIndex => [PlayerName => [ScoreFieldName => ScoreFieldValue]]
		declare netread Integer[Text][Text][Integer] Net_ScoresTableData for UI;
		declare netread Text[Text] Net_ScoresTableNames for UI;
		declare netread Text Net_FooterText for UI;
		declare netread Boolean[Text] Net_WarmUpReadyStates for UI;
		declare netread Integer Net_GameplayPhase for UI;
		
		/* Scoreboard control Variables */
		
		declare Integer CurrentPageIndex = 0;
		declare Integer LastUpdate = 0;
		
		while(True) {
			yield;
			
			if (LastUpdate == Net_ScoreBoardUpdateStamp) continue;					
			LastUpdate = Net_ScoreBoardUpdateStamp;
			
			/* Update state (CurrentPageIndex) */					
			declare Integer NbPlayersTeam1 = Net_ScoresTableData.get(1, []).count;
			declare Integer NbPlayersTeam2 = Net_ScoresTableData.get(2, []).count;
			declare Integer NbPages	= ML::Max(NbPlayersTeam1, NbPlayersTeam2) / {{{PlayersPerPage}}} + 1;
			CurrentPageIndex = ML::Clamp(CurrentPageIndex, 0, NbPages - 1);
			
			// hide Framecontrols if page is less then one
			if (NbPages <= 1) FramePageControls.Visible = False;			
			// Hide buttons when can't go next or previous
			if (CurrentPageIndex <= 0) QuadPagePrevious.Visible = False;
			else QuadPagePrevious.Visible = True;
			
			if (CurrentPageIndex >= NbPages - 1) QuadPageNext.Visible = False;
			else QuadPageNext.Visible = True;
			
			/* Team specific Data	*/
			
			LabelTeam1Score.Value = TL::ToText(Net_Team1RoundScore);
			LabelTeam2Score.Value = TL::ToText(Net_Team2RoundScore);
			
			/* Player specific Data */
			
			for (TeamIndex, 1, 2) {				
				declare Integer[Text][] AllScoresTableData = [];
				declare CSmPlayer[] TeamPlayers = [];
				foreach (Login => PlayerScoresTableData in Net_ScoresTableData[TeamIndex]) {
					declare CSmPlayer _Player <=> GetPlayer(Login);
					if (_Player == Null) continue;
					if (_Player.RequestsSpectate || !isConnected(Login)) {
						if (PlayerScoresTableData.get("{{{C_ScoresTable_PointsKey}}}", 0) != 0) {
							AllScoresTableData.add(PlayerScoresTableData);
							TeamPlayers.add(_Player);								
						}
					} else {
						AllScoresTableData.add(PlayerScoresTableData);
						TeamPlayers.add(_Player);					
					}
				}
				
				for (PlayerCardIndex, 0, {{{PlayersPerPage - 1}}}) {
					// Get the player card
					declare CMlFrame PlayerCard;							
					if (TeamIndex == 1) PlayerCard = PlayerCardFramesTeam1[PlayerCardIndex];
					else PlayerCard = PlayerCardFramesTeam2[PlayerCardIndex];
					
					declare PlayerIndex = CurrentPageIndex * {{{PlayersPerPage}}} + PlayerCardIndex;
					
					// Card Visibility
					if (PlayerIndex >= AllScoresTableData.count) {
						PlayerCard.Visible = False;
						continue;
					}
					
					declare Integer[Text] PlayerScoresTableData = AllScoresTableData[PlayerIndex];
					declare CSmPlayer Player <=> TeamPlayers[PlayerIndex];
					declare CMlQuad QuadInfo = (PlayerCard.GetFirstChild("info-icon") as CMlQuad);							
					QuadInfo.Hide();
					
					// Set values in player card
					declare CMlLabel LabelPlayerName = (PlayerCard.GetFirstChild("name") as CMlLabel);
					declare CMlQuad QuadPlayerAvatar = (PlayerCard.GetFirstChild("avatar") as CMlQuad);
					declare CMlQuad QuadPlayerBackground = (PlayerCard.GetFirstChild("background") as CMlQuad);
					declare CMlLabel LabelPlayerPoints = (PlayerCard.GetFirstChild("points") as CMlLabel);
					declare CMlLabel LabelPlayerPointsAdd = (PlayerCard.GetFirstChild("points-add") as CMlLabel);
					declare CMlLabel LabelPlayerFlagsScored = (PlayerCard.GetFirstChild("flags-scored") as CMlLabel);
					declare CMlLabel LabelPlayerFlagsScoredAdd = (PlayerCard.GetFirstChild("flags-scored-add") as CMlLabel);
					declare CMlLabel LabelPlayerFlagsStolen = (PlayerCard.GetFirstChild("flags-stolen") as CMlLabel);
					declare CMlLabel LabelPlayerFlagsStolenAdd = (PlayerCard.GetFirstChild("flags-stolen-add") as CMlLabel);							
					declare backgroundColorMultiplier = 0.5;							
					QuadPlayerAvatar.Opacity = 1.;					
					
					declare isDisconnected = !isConnected(Player.User.Login);
					if (Player.RequestsSpectate || isDisconnected) {
						QuadInfo.Show();
						QuadInfo.Style = "UICommon64_1";
						QuadInfo.Substyle = "Camera_light";
						if (isDisconnected) {
							QuadInfo.Style = "Icons64x64_2";
							QuadInfo.Substyle = "Disconnected";
						}
						backgroundColorMultiplier = 0.25;
						QuadPlayerAvatar.Opacity = 0.5;
					}
					
					declare CTeam Team = Null;
					if (Player.CurrentClan > 0) Team <=> Teams[TeamIndex - 1];
					declare Vec3 BackgroundColor = GetTeamPrimaryColor(Team);
					BackgroundColor.X *= backgroundColorMultiplier;
					BackgroundColor.Y *= backgroundColorMultiplier;
					BackgroundColor.Z *= backgroundColorMultiplier;
					
					LabelPlayerName.Value = "*Not Available*";										
					QuadPlayerAvatar.BgColor =  GetTeamPrimaryColor(Team);

					if (Player.User != Null) {
						QuadPlayerAvatar.ImageUrl = Player.User.CountryFlagUrl;																
						LabelPlayerName.Value = Player.User.Name;
					}
					
					if (Net_GameplayPhase == {{{FlagRush_Common::C_GameplayPhase_Warmup}}}) {
						if (Net_WarmUpReadyStates.existskey(Player.User.Login)) {
							if (Net_WarmUpReadyStates[Player.User.Login]) {
								BackgroundColor = <0.1, 0.7, 0.1>;
							} else {
								BackgroundColor = <0.9, 0.1, 0.1>;
							}
						}
					}
					
					QuadPlayerBackground.Colorize = BackgroundColor;
					
					LabelPlayerPoints.Value
					= TL::ToText(PlayerScoresTableData.get("{{{C_ScoresTable_PointsKey}}}", 0));
					LabelPlayerPointsAdd.Value
					= TL::ToText(PlayerScoresTableData.get("{{{C_ScoresTable_PointsRoundKey}}}", 0));
					LabelPlayerFlagsScored.Value
					= TL::ToText(PlayerScoresTableData.get("{{{C_ScoresTable_FlagsScoredKey}}}", 0));
					LabelPlayerFlagsScoredAdd.Value
					= TL::ToText(PlayerScoresTableData.get("{{{C_ScoresTable_FlagsScoredRoundKey}}}", 0));
					LabelPlayerFlagsStolen.Value
					= TL::ToText(PlayerScoresTableData.get("{{{C_ScoresTable_FlagsStolenKey}}}", 0));
					LabelPlayerFlagsStolenAdd.Value
					= TL::ToText(PlayerScoresTableData.get("{{{C_ScoresTable_FlagsStolenRoundKey}}}", 0));
					
					PlayerCard.Visible = True;											
				} //Player CardIndex
			} // TeamIndex
			
			// Hide footer if no text is displayed, else set text
			if(Net_FooterText == "") {
				FrameFooter.Visible = False;
			}
			else {
				FrameFooter.Visible = True;					
				LabelFooter.Value = Net_FooterText;
			}
			
			/* Event Handling */
			
			foreach(Event in PendingEvents) {						
				switch(Event.Type) {
					case CMlScriptEvent::Type::KeyPress: {
						switch(Event.KeyCode) {
							case 104: {	// Page Up = Previous
								CurrentPageIndex -= 1;
							}
							case 79: {	// Page Down = Next
								CurrentPageIndex += 1;
							}
						}
					}
					case CMlScriptEvent::Type::MouseClick: {
						switch(Event.ControlId) {
							case "page-previous": {
								CurrentPageIndex -= 1;
							}
							case "page-next": {
								CurrentPageIndex += 1;
							}
						}
					}
				} // Switch Event
			} // Event Loop
		} // While(True) Loop
	} // main
	--></script>
	</manialink>
	""";
	
	return MLText;
}
