#Include	"MathLib" as ML
#Include	"ColorLib" as CL
#Include	"Libs/Zrx/FlagRush/FlagRush_Common.Script.txt" as FlagRushCommon

#Const		C_ScoresTable_FlagsScoredKey					"flags-scored"
#Const		C_ScoresTable_FlagsScoredRoundKey			"flags-scored-round"
#Const		C_ScoresTable_FlagsStolenKey					"flags-stolen"
#Const		C_ScoresTable_FlagsStolenRoundKey			"flags-stolen-round"
#Const		C_ScoresTable_PointsKey								"points"
#Const		C_ScoresTable_PointsRoundKey					"points-round"

/**
 *	Common Functions to embed in multiple manialink
 */
Text GetTeamColorNetreadFunctions() {
	return """
			Vec3 GetTeamPrimaryColor(CTeam Team) {
				if(Team == Null) return {{{FlagRushCommon::C_DefaultNeutralColor}}};
				declare netread Vec3 Net_PrimaryColor for Team;
				return Net_PrimaryColor;
			}
			
			Vec3 GetTeamSecondaryColor(CTeam Team) {
				if(Team == Null) return {{{FlagRushCommon::C_DefaultNeutralColor}}};
				declare netread Vec3 Net_SecondaryColor for Team;
				return Net_SecondaryColor;
			}
""";
}

Text GetMarkerManialink() {
	return """
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
	<manialink version="3" name="FlagRush_Markers">
		
		<framemodel id="model-marker-base">
			<quad pos="0 0" z-index="1" size="10 10" bgcolor="FFFA" style="ManiaPlanetMainMenu" substyle="IconHome" halign="center" valign="center" colorize="fff" id="quad-base"/>
		</framemodel>

		<framemodel id="model-marker-flag">
			<quad pos="0 0" z-index="2" size="10 10" bgcolor="FFFA" halign="center" valign="center" style="UIConstruction_Buttons" substyle="Validate" id="quad-flag"/>
			<gauge pos="0 7.5" z-index="0" size="20 7.5" valign="center" halign="center" clan="0" style="EnergyBar" drawbg="0" id="gauge-flag" hidden="1"/>
		</framemodel>

		<frameinstance modelid="model-marker-base" id="marker-base-team1" hidden="1"/>
		<frameinstance modelid="model-marker-base" id="marker-base-team2" hidden="1"/>
		<frameinstance modelid="model-marker-flag" id="marker-flag" hidden="1"/>
		
		<script><!--
			
			{{{GetTeamColorNetreadFunctions()}}}
		
			main() {
				declare FrameMarkerBase1 = (Page.GetFirstChild("marker-base-team1") as CMlFrame);
				declare QuadMarkerBase1 = (FrameMarkerBase1.GetFirstChild("quad-base") as CMlQuad);
				
				declare FrameMarkerBase2 = (Page.GetFirstChild("marker-base-team2") as CMlFrame);
				declare QuadMarkerBase2 = (FrameMarkerBase2.GetFirstChild("quad-base") as CMlQuad);
				
				declare FrameMarkerFlag = (Page.GetFirstChild("marker-flag") as CMlFrame);
				declare QuadMarkerFlag = (FrameMarkerFlag.GetFirstChild("quad-flag") as CMlQuad);
				declare GaugeMarkerFlag = (FrameMarkerFlag.GetFirstChild("gauge-flag") as CMlGauge);
				
				QuadMarkerBase1.Colorize = GetTeamPrimaryColor(Teams[0]);
				QuadMarkerBase2.Colorize = GetTeamPrimaryColor(Teams[1]);
				QuadMarkerFlag.Colorize = GetTeamPrimaryColor(Null);
				
				declare netread Integer Net_FlagCarrierClan for UI;
				declare netread Boolean Net_HideFlagMarker for UI;
				
				declare netread Integer Net_FlagGaugeStartServerDate for UI;
				declare netread Integer Net_FlagGaugeDuration for UI;
				declare Integer LastFlagGaugeStartServerDate;
				declare Integer FlagGaugeStartDate;
							
				while(True) {
					yield;
					
					/* Hide when requested */
					
					if(Net_HideFlagMarker) {
						GaugeMarkerFlag.Visible = False;
						QuadMarkerFlag.Visible = False;
						continue;
					}
					
					QuadMarkerFlag.Visible = True;
					
					/* Colors */
					
					// Get the right color
					declare Vec3 CurrentColor = GetTeamPrimaryColor(Null);
					if(Net_FlagCarrierClan > 0) CurrentColor = GetTeamPrimaryColor(Teams[Net_FlagCarrierClan - 1]);
					
					// Apply color
					QuadMarkerFlag.Colorize = CurrentColor;
					GaugeMarkerFlag.Color = CurrentColor;
					
					/* Gauge animation */
					
					// Server CSmMode.Now is not Client CMlScript.Now (?), Get local timing equivalents
					if(Net_FlagGaugeStartServerDate > LastFlagGaugeStartServerDate) {
						LastFlagGaugeStartServerDate = Net_FlagGaugeStartServerDate;
						FlagGaugeStartDate = Now;
					}
					
					// Flag gauge end in future
					if(FlagGaugeStartDate + Net_FlagGaugeDuration > Now) {
						declare Ratio = (0. + Net_FlagGaugeDuration - (Now - FlagGaugeStartDate)) / Net_FlagGaugeDuration;
						GaugeMarkerFlag.Ratio = 0.2 + Ratio * 0.8;
						GaugeMarkerFlag.Visible = True;
						QuadMarkerFlag.Opacity = 0.5;
					}
					// Flag gauge already finished
					else {	// Flag respawn already happened
						GaugeMarkerFlag.Visible = False;
						QuadMarkerFlag.Opacity = 1.;
					}
				}
			}
		--></script>

</manialink>
	""";
}

Text GetScoresHeaderManialink() {	
	return """
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<manialink version="3" name="FlagRush_ScoresHeader">
<frame halign="center" valign="top" pos="0 90" scale=".8">
	<quad pos="0 0" z-index="1" size="1 10" bgcolor="FFF" valign="top" halign="center" id="teams-divider"/>
	<quad pos="0 -10" z-index="1" size="120 1" bgcolor="FFF" valign="top" halign="center" id="teams-divider"/>
	
	<quad pos="0 0" z-index="0" size="100 10" halign="center" valign="top" opacity="1" style="Bgs1" substyle="BgDialogBlur" id="teams-background"/>
	<quad pos="-50 0" z-index="0" size="10 10" bgcolor="00F" valign="top" halign="right" id="team1-score-background"/>
	<quad pos="50 0" z-index="0" size="10 10" bgcolor="F00" valign="top" halign="left" id="team2-score-background"/>
	
	<label pos="-25 -5" z-index="1" size="45 10" text="Team Blue" style="TextValueSmallSm" valign="center" halign="center" textsize="5" id="team1-name"/>
	<label pos="25 -5" z-index="1" size="45 10" text="Team Red" style="TextValueSmallSm" valign="center" halign="center" textsize="5" id="team2-name"/>
	
	<label pos="-55 -5" z-index="2" size="10 10" text="0" halign="center" valign="center" style="TextValueSmallSm" textsize="5" id="team1-score"/>
	<label pos="55 -5" z-index="2" size="10 10" text="0" halign="center" valign="center" style="TextValueSmallSm" textsize="5" id="team2-score"/>
	
	<frame id="mapscores" pos="0 -11">
		<quad pos="0 0" z-index="0" size="72.5 5" bgcolor="FFFA" valign="top" halign="center" style="Bgs1" substyle="BgDialogBlur"/>
		<label pos="0 -2.5" z-index="2" size="20 5" text="Match Score" halign="center" valign="center" style="TextValueSmallSm" textsize="1"/>
		
		<gauge pos="-10 -2.5" z-index="1" size="25 2.5" id="mapscore-gauge-team1-background" color="FFF" halign="right" valign="center" style="ProgressBar" drawbg="0"/>
		<gauge	 pos="-10 -2.5" z-index="2" size="25 2.5" id="mapscore-gauge-team1" color="00F" halign="right" valign="center" style="ProgressBar" drawbg="0" drawblockbg="0"/>
		
		<gauge pos="10 -2.5" z-index="1" size="25 2.5" id="mapscore-gauge-team2-background" color="FFF" halign="left" valign="center" style="ProgressBar" drawbg="0"/>
		<gauge pos="10 -2.5" z-index="2" size="25 2.5" id="mapscore-gauge-team2" color="F00" valign="center" style="ProgressBar" halign="left" drawblockbg="0" drawbg="0"/>
	</frame>
</frame>

<script>
	<!--
		#Include "TextLib" as TL
		
		{{{GetTeamColorNetreadFunctions()}}}
		
		main() {
			declare CMlLabel LabelTeam1Name = (Page.GetFirstChild("team1-name") as CMlLabel);
			declare CMlLabel LabelTeam2Name = (Page.GetFirstChild("team2-name") as CMlLabel);
			declare CMlLabel LabelTeam1Score = (Page.GetFirstChild("team1-score") as CMlLabel);
			declare CMlLabel LabelTeam2Score = (Page.GetFirstChild("team2-score") as CMlLabel);
			declare CMlQuad QuadTeam1ScoreBackground = (Page.GetFirstChild("team1-score-background") as CMlQuad);
			declare CMlQuad QuadTeam2ScoreBackground = (Page.GetFirstChild("team2-score-background") as CMlQuad);
			
			declare CMlFrame FrameMapScores = (Page.GetFirstChild("mapscores") as CMlFrame);
			declare CMlGauge GaugeMapScoreTeam1 = (Page.GetFirstChild("mapscore-gauge-team1") as CMlGauge);
			declare CMlGauge GaugeMapScoreTeam1Background = (Page.GetFirstChild("mapscore-gauge-team1-background") as CMlGauge);
			declare CMlGauge GaugeMapScoreTeam2 = (Page.GetFirstChild("mapscore-gauge-team2") as CMlGauge);
			declare CMlGauge GaugeMapScoreTeam2Background = (Page.GetFirstChild("mapscore-gauge-team2-background") as CMlGauge);
			
			
			LabelTeam1Name.Value = Teams[0].Name;
			LabelTeam2Name.Value = Teams[1].Name;
			QuadTeam1ScoreBackground.BgColor = GetTeamPrimaryColor(Teams[0]);
			QuadTeam2ScoreBackground.BgColor = GetTeamPrimaryColor(Teams[1]);
			
			GaugeMapScoreTeam1.Color = GetTeamPrimaryColor(Teams[0]);
			GaugeMapScoreTeam2.Color = GetTeamPrimaryColor(Teams[1]);
			
			declare netread Integer Net_Team1RoundScore for UI;
			declare netread Integer Net_Team2RoundScore for UI;
			declare netread Integer Net_Team1MapScore for UI;
			declare netread Integer Net_Team2MapScore for UI;
			declare netread Integer Net_NbMapsToWinMatch for UI;
			
			while(True) {
				yield;
				
				/* Round score */
				
				LabelTeam1Score.Value = TL::ToText(Net_Team1RoundScore);
				LabelTeam2Score.Value = TL::ToText(Net_Team2RoundScore);
				
				/* Match score */
				
				// If only one map is played or value is invalid, hide mapscores
				if(Net_NbMapsToWinMatch < 2) {
					FrameMapScores.Visible = False;
				}
				else {
					FrameMapScores.Visible = True;
					
					// Gauge grading				
					declare GradingRatio = 1. / Net_NbMapsToWinMatch;
					GaugeMapScoreTeam1.GradingRatio = GradingRatio;
						GaugeMapScoreTeam1Background.GradingRatio = GradingRatio;
					GaugeMapScoreTeam2.GradingRatio = GradingRatio;
					GaugeMapScoreTeam2Background.GradingRatio = GradingRatio;
						
					// Gauge Ratio
					GaugeMapScoreTeam1.Ratio = (0. + Net_Team1MapScore) / Net_NbMapsToWinMatch;
					GaugeMapScoreTeam2.Ratio = (0. + Net_Team2MapScore) / Net_NbMapsToWinMatch;
				}
			}
		}
	-->
</script>
</manialink>
	""";
}

Text GetScoresTableManialink(Integer _PlayersPerPage) {
	declare PlayersPerPage = ML::Clamp(_PlayersPerPage, 1, 5);
	
	// Create Text with XML Frame instances to insert in manialink text
	declare Text PlayerCardFrameInstancesTeam1Xml;
	declare Text PlayerCardFrameInstancesTeam2Xml;
	for(I, 1, PlayersPerPage) {
		PlayerCardFrameInstancesTeam1Xml
			^= """<frameinstance modelid="player-card-left" pos="0 {{{-(5+(I-1)*10)}}}" id="player-card-team1-{{{I}}}"/>
			""";
		PlayerCardFrameInstancesTeam2Xml
			^= """<frameinstance modelid="player-card-right" pos="0 {{{-(5+(I-1)*10)}}}" id="player-card-team2-{{{I}}}"/>
			""";
	}
	declare Text PlayerCardFrameInstancesXml = """
	{{{PlayerCardFrameInstancesTeam1Xml}}}
	{{{PlayerCardFrameInstancesTeam2Xml}}}
	""";
	
	// Create Strings with Maniascript arrays to insert in manialink script text
	declare Text PlayerCardFramesTeam1ScriptList = "[";
	declare Text PlayerCardFramesTeam2ScriptList = "[";
	for(I, 1, PlayersPerPage) {
		PlayerCardFramesTeam1ScriptList ^= """
			Page.GetFirstChild("player-card-team1-{{{I}}}") as CMlFrame""";
		
		PlayerCardFramesTeam2ScriptList ^= """
			Page.GetFirstChild("player-card-team2-{{{I}}}") as CMlFrame""";
		
		if(I < PlayersPerPage) {
			PlayerCardFramesTeam1ScriptList ^= ",";
			PlayerCardFramesTeam2ScriptList ^= ",";
		}
		else {
			PlayerCardFramesTeam1ScriptList ^= "]";
			PlayerCardFramesTeam2ScriptList ^= "]";		
		}
	}
	
	// Build the actual manialink and return it
	declare MLText = """
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<manialink version="3" name="FlagRush_ScoresTable">

	<!-- Framemodels for player cards -->
	
	<framemodel id="player-card-left">
		<quad pos="-30 0" z-index="-1" size="58 8" bgcolor="FFF" opacity="0.25" id="background" halign="center" valign="center"/>
		
		<quad pos="-59 0" z-index="1" size="8 8" bgcolor="FFF" halign="left" valign="center" id="avatar"/>
		<label pos="-50 0" z-index="1" size="20 5" text="Player Name" style="TextValueSmallSm" valign="center" halign="left" textsize="2" id="name"/>
		
		<label pos="-5 2.5" z-index="1" size="9 3" text="0" style="TextValueSmallSm" halign="center" textsize="2" id="points" valign="top"/>
		<label pos="-15 2.5" z-index="1" size="9 3" text="0" style="TextValueSmallSm" valign="top" halign="center" textsize="2" id="flags-scored"/>
		<label pos="-25 2.5" z-index="1" size="9 3" text="0" style="TextValueSmallSm" valign="top" halign="center" textsize="2" id="flags-stolen"/>
		
		<label pos="-5 -3.5" z-index="1" size="9 3" text="0" style="TextRaceChrono" halign="center" textsize="0.1" id="points-add" valign="bottom" textprefix="$0f0+"/>
		<label pos="-15 -3.5" z-index="1" size="9 3" text="0" style="TextRaceChrono" valign="bottom" halign="center" textsize="0.1" id="flags-scored-add" textprefix="$0f0+"/>
		<label pos="-25 -3.5" z-index="1" size="9 3" text="0" style="TextRaceChrono" valign="bottom" halign="center" textsize="0.1" id="flags-stolen-add" textprefix="$0f0+"/>
	</framemodel>
	
	<framemodel id="player-card-right">
		<quad pos="30 0" z-index="-1" size="58 8" bgcolor="FFF" opacity="0.25" id="background" halign="center" valign="center"/>
		
		<quad pos="59 0" z-index="1" size="8 8" bgcolor="FFF" halign="right" valign="center" id="avatar"/>
		<label pos="50 0" z-index="1" size="20 5" text="Player Name" style="TextValueSmallSm" valign="center" halign="right" textsize="2" id="name"/>
		
		<label pos="5 2.5" z-index="1" size="9 3" text="0" style="TextValueSmallSm" halign="center" textsize="2" id="points" valign="top"/>
		<label pos="15 2.5" z-index="1" size="9 3" text="0" style="TextValueSmallSm" valign="top" halign="center" textsize="2" id="flags-scored"/>
		<label pos="25 2.5" z-index="1" size="9 3" text="0" style="TextValueSmallSm" valign="top" halign="center" textsize="2" id="flags-stolen"/>
		
		<label pos="5 -3.5" z-index="1" size="9 3" text="0" style="TextRaceChrono" halign="center" textsize="0.1" id="points-add" valign="bottom" textprefix="$0f0+"/>
		<label pos="15 -3.5" z-index="1" size="9 3" text="0" style="TextRaceChrono" valign="bottom" halign="center" textsize="0.1" id="flags-scored-add" textprefix="$0f0+"/>
		<label pos="25 -3.5" z-index="1" size="9 3" text="0" style="TextRaceChrono" valign="bottom" halign="center" textsize="0.1" id="flags-stolen-add" textprefix="$0f0+"/>
	</framemodel>
	
	<!-- Actual scoreboard -->
	<!--
			Structure:
			
			scoreboard-main (Frame)
				teamscores-round (Frame)
					for each team: team name, roundscore, colored score background
				divider
				playerscores (Frame)
					column-legend (Frame)
					playergrid (Frame)
						4x player-card-team1 (Frameinstance)
						4x player-card-team2 (Frameinstance)
	-->
	
	<frame id="scoreboard-main" scale="1.4" pos="0 35" valign="bottom">
		<frame id="header">
			<quad pos="0 0" z-index="-1" size="100 10" bgcolor="FFFA" halign="center" valign="center" style="Bgs1" substyle="BgDialogBlur" id="header-background"/>
			<quad pos="0 0" z-index="1" size="1 10" bgcolor="FFF" halign="center" valign="center" id="header-teams-divider"/>
			
			<label pos="-25 0" z-index="1" size="50 10" text="Team Blue" style="TextValueSmallSm" halign="center" valign="center" id="team1-name"/>
			<quad pos="-55 0" z-index="0" size="10 10" bgcolor="00F" halign="center" valign="center" id="team1-score-background"/>
			<label pos="-55 0" z-index="1" size="10 10" text="0" style="TextValueSmallSm" halign="center" valign="center" id="team1-score"/>
			
			<label pos="25 0" z-index="1" size="50 10" text="Team Red" style="TextValueSmallSm" halign="center" valign="center" id="team2-name"/>
			<quad pos="55 0" z-index="0" size="10 10" bgcolor="F00" halign="center" valign="center" id="team2-score-background"/>
			<label pos="55 0" z-index="1" size="10 10" text="0" style="TextValueSmallSm" halign="center" valign="center" id="team2-score"/>
	
			<quad pos="0 -5" z-index="0" size="120 1" bgcolor="FFF" halign="center" id="divider" valign="top"/>
		</frame>
		
		<frame id="body" pos="0 -6">
			<quad pos="0 0" z-index="-1" size="120 {{{10 + PlayersPerPage * 10}}}" bgcolor="FFFA" halign="center" valign="top" style="Bgs1" substyle="BgDialogBlur"/>
			
			<frame id="column-legend" pos="0 -5.5">
				<frame id="team1">
					<label pos="-5 0" z-index="1" size="10 5" text="Points" style="TextValueSmallSm" valign="center" halign="center" textsize="0.2"/>
					<label pos="-15 0" z-index="1" size="10 5" text="Flags Scored" style="TextValueSmallSm" valign="center" halign="center" textsize="0.2" autonewline="1"/>
					<label pos="-25 0" z-index="1" size="10 5" text="Flags Stolen" style="TextValueSmallSm" valign="center" halign="center" textsize="0.2" autonewline="1"/>
				</frame>
				
				<frame id="team2">
					<label pos="5 0" z-index="1" size="10 5" text="Points" style="TextValueSmallSm" valign="center" halign="center" textsize="0.2"/>
					<label pos="15 0" z-index="1" size="10 5" text="Flags Scored" style="TextValueSmallSm" valign="center" halign="center" textsize="0.2" autonewline="1"/>
					<label pos="25 0" z-index="1" size="10 5" text="Flags Stolen" style="TextValueSmallSm" valign="center" halign="center" textsize="0.2" autonewline="1"/>
				</frame>
			</frame> <!-- column legend -->
			
			<frame id="page-controls" pos="55 -5">
				<quad pos="0" z-index="1" size="5 5" bgcolor="FFF" halign="right" valign="center" style="Icons64x64_1" substyle="ArrowUp" scriptevents="1" id="page-previous"/>
				<quad pos="0" z-index="1" size="5 5" bgcolor="FFF" halign="left" valign="center" style="Icons64x64_1" substyle="ArrowDown" scriptevents="1" id="page-next"/>
			</frame>
			
			<frame id="playergrid" pos="0 -9">
				{{{PlayerCardFrameInstancesXml}}}
			</frame>
		</frame> <!-- body -->
		
		<frame id="footer" pos="0 {{{- (16 + (PlayersPerPage * 10))}}}">
			<quad pos="0 0" z-index="0" size="120 1" bgcolor="FFF" halign="center" id="divider" valign="top"/>
			
			<quad pos="0 -1" z-index="-1" size="120 10" bgcolor="FFFA" halign="center" valign="top" style="Bgs1" substyle="BgDialogBlur" id="background"/>
			
			<label pos="0 -6" z-index="0" size="120 10" text="Footer Text" valign="center" halign="center" style="TextValueSmallSm" textsize="2" id="text"/>
		</frame>
		
	</frame> <!-- Scoreboard -->
	
	<!-- Script to handle the scoreboard -->
	
	<script>
		<!--
			#Include "TextLib" as TL
			#Include "MathLib" as ML
			
			{{{GetTeamColorNetreadFunctions()}}}
			
			main() {
				
				/* CMlControl references */
				
				// Header
				declare CMlQuad QuadTeam1ScoreBackground = (Page.GetFirstChild("team1-score-background") as CMlQuad);
				declare CMlQuad QuadTeam2ScoreBackground = (Page.GetFirstChild("team2-score-background") as CMlQuad);
				declare CMlLabel LabelTeam1Score = (Page.GetFirstChild("team1-score") as CMlLabel);
				declare CMlLabel LabelTeam2Score = (Page.GetFirstChild("team2-score") as CMlLabel);
				declare CMlLabel LabelTeam1Name = (Page.GetFirstChild("team1-name") as CMlLabel);
				declare CMlLabel LabelTeam2Name = (Page.GetFirstChild("team2-name") as CMlLabel);
				
				// Body
				declare CMlFrame[] PlayerCardFramesTeam1 = {{{PlayerCardFramesTeam1ScriptList}}};
				declare CMlFrame[] PlayerCardFramesTeam2 = {{{PlayerCardFramesTeam2ScriptList}}};
				
				declare CMlQuad QuadPagePrevious = (Page.GetFirstChild("page-previous") as CMlQuad);
				declare CMlQuad QuadPageNext = (Page.GetFirstChild("page-next") as CMlQuad);
				
				// Footer
				declare CMlFrame FrameFooter = (Page.GetFirstChild("footer") as CMlFrame);
				declare CMlLabel LabelFooter = (FrameFooter.GetFirstChild("text") as CMlLabel);
				
				/* Init some controls */
				
				LabelTeam1Name.Value = Teams[0].Name;
				LabelTeam2Name.Value = Teams[1].Name;
				QuadTeam1ScoreBackground.BgColor = GetTeamPrimaryColor(Teams[0]);
				QuadTeam2ScoreBackground.BgColor = GetTeamPrimaryColor(Teams[1]);
				
				/* Netread variables */
				
				// Same as scores header
				declare netread Integer Net_Team1RoundScore for UI;
				declare netread Integer Net_Team2RoundScore for UI;
				declare netread Integer Net_Team1MapScore for UI;			// Not used (yet)
				declare netread Integer Net_Team2MapScore for UI;			// Not used (yet)
				declare netread Integer Net_NbMapsToWinMatch for UI;	// Not used (yet)
				
				// Scoreboard data
				// Looks scary, but: ClanIndex => [PlayerName => [ScoreFieldName => ScoreFieldValue]]
				declare netread Integer[Text][Text][Integer] Net_ScoresTableData for UI;
				declare netread Text Net_FooterText for UI;
				
				/* Scoreboard control Variables */
				
				declare Integer CurrentPageIndex = 0;
				
				
				
				while(True) {
					yield;
					
					/* Update state (CurrentPageIndex) */
					
					declare Integer NbPlayersTeam1 = Net_ScoresTableData.get(1, []).count;
					declare Integer NbPlayersTeam2 = Net_ScoresTableData.get(2, []).count;
					declare Integer NbPages	= ML::Max(NbPlayersTeam1, NbPlayersTeam2)	/ {{{PlayersPerPage}}} + 1;
					CurrentPageIndex = ML::Clamp(CurrentPageIndex, 0, NbPages - 1);
					
					// Hide buttons when can't go next or previous
					if(CurrentPageIndex <= 0) QuadPagePrevious.Visible = False;
					else QuadPagePrevious.Visible = True;
					
					if(CurrentPageIndex >= NbPages - 1) QuadPageNext.Visible = False;
					else QuadPageNext.Visible = True;
					
					/* Team specific Data	*/
					
					LabelTeam1Score.Value = TL::ToText(Net_Team1RoundScore);
					LabelTeam2Score.Value = TL::ToText(Net_Team2RoundScore);
					
					/* Player specific Data */
					
					for(TeamIndex, 1, 2) {
						for(PlayerCardIndex, 0, {{{PlayersPerPage - 1}}}) {
							// Get the player card
							declare CMlFrame PlayerCard;
							if(TeamIndex == 1) PlayerCard = PlayerCardFramesTeam1[PlayerCardIndex];
							else PlayerCard = PlayerCardFramesTeam2[PlayerCardIndex];
							
							declare PlayerIndex = CurrentPageIndex * {{{PlayersPerPage}}} + PlayerCardIndex;
							
							// Card Visibility
							if(PlayerIndex >= Net_ScoresTableData.get(TeamIndex, []).count) {
								PlayerCard.Visible = False;
								continue;
							}
							PlayerCard.Visible = True;
							
							declare Text PlayerName;
							declare Integer[Text] PlayerScoresTableData;
							
							// Can't use index on associative array; have to trick a bit
							declare PlayerIndexCounter = 0;
							foreach(_PlayerName => _PlayerScoresTableData in Net_ScoresTableData[TeamIndex]) {
								if(PlayerIndexCounter < PlayerIndex) {
									PlayerIndexCounter += 1;
									continue;
								}
								
								PlayerName = _PlayerName;
								PlayerScoresTableData = _PlayerScoresTableData;
								break;
							}
							
							// Get player reference
							declare CSmPlayer Player;
							foreach(PlayerFromList in Players) if(PlayerFromList.User.Name == PlayerName) Player <=> PlayerFromList;
							if(Player == Null) continue;
							
							// Set values in player card
							declare CMlLabel LabelPlayerName = (PlayerCard.GetFirstChild("name") as CMlLabel);
							declare CMlQuad QuadPlayerAvatar = (PlayerCard.GetFirstChild("avatar") as CMlQuad);
							declare CMlQuad QuadPlayerBackground = (PlayerCard.GetFirstChild("background") as CMlQuad);
							
							declare CMlLabel LabelPlayerPoints = (PlayerCard.GetFirstChild("points") as CMlLabel);
							declare CMlLabel LabelPlayerPointsAdd = (PlayerCard.GetFirstChild("points-add") as CMlLabel);
							declare CMlLabel LabelPlayerFlagsScored = (PlayerCard.GetFirstChild("flags-scored") as CMlLabel);
							declare CMlLabel LabelPlayerFlagsScoredAdd = (PlayerCard.GetFirstChild("flags-scored-add") as CMlLabel);
							declare CMlLabel LabelPlayerFlagsStolen = (PlayerCard.GetFirstChild("flags-stolen") as CMlLabel);
							declare CMlLabel LabelPlayerFlagsStolenAdd = (PlayerCard.GetFirstChild("flags-stolen-add") as CMlLabel);
							
							declare CTeam Team = Null;
							if(Player.CurrentClan > 0) Team <=> Teams[Player.CurrentClan - 1];
							declare Vec3 BackgroundColor = GetTeamPrimaryColor(Team);
							BackgroundColor.X /= 2;
							BackgroundColor.Y /= 2;
							BackgroundColor.Z /= 2;
							
							LabelPlayerName.Value = PlayerName;
							QuadPlayerAvatar.BgColor =  GetTeamPrimaryColor(Team);
							QuadPlayerAvatar.ImageUrl = Player.User.CountryFlagUrl;
							QuadPlayerBackground.BgColor = BackgroundColor;
							
							LabelPlayerPoints.Value
								= TL::ToText(PlayerScoresTableData.get("{{{C_ScoresTable_PointsKey}}}", 0));
							LabelPlayerPointsAdd.Value
								= TL::ToText(PlayerScoresTableData.get("{{{C_ScoresTable_PointsRoundKey}}}", 0));
							LabelPlayerFlagsScored.Value
								= TL::ToText(PlayerScoresTableData.get("{{{C_ScoresTable_FlagsScoredKey}}}", 0));
							LabelPlayerFlagsScoredAdd.Value
								= TL::ToText(PlayerScoresTableData.get("{{{C_ScoresTable_FlagsScoredRoundKey}}}", 0));
							LabelPlayerFlagsStolen.Value
								= TL::ToText(PlayerScoresTableData.get("{{{C_ScoresTable_FlagsStolenKey}}}", 0));
							LabelPlayerFlagsStolenAdd.Value
								= TL::ToText(PlayerScoresTableData.get("{{{C_ScoresTable_FlagsStolenRoundKey}}}", 0));
									
							PlayerCard.Visible = True;
						} //Player CardIndex
					} // TeamIndex
					
					// Hide footer if no text is displayed, else set text
					if(Net_FooterText == "") {
						FrameFooter.Visible = False;
					}
					else {
						FrameFooter.Visible = True;					
						LabelFooter.Value = Net_FooterText;
					}
					
					/* Event Handling */
					
					foreach(Event in PendingEvents) {						
						switch(Event.Type) {
							case CMlScriptEvent::Type::KeyPress: {
								switch(Event.KeyCode) {
									case 104: {	// Page Up = Previous
										CurrentPageIndex -= 1;
									}
									case 79: {	// Page Down = Next
										CurrentPageIndex += 1;
									}
								}
							}
							case CMlScriptEvent::Type::MouseClick: {
								switch(Event.ControlId) {
									case "page-previous": {
										CurrentPageIndex -= 1;
									}
									case "page-next": {
										CurrentPageIndex += 1;
									}
								}
							}
						} // Switch Event
					} // Event Loop
				} // While(True) Loop
			} // main
		-->
	</script>
</manialink>
	""";
	
	return MLText;
}

Text GetMainUIManialink() {
	return """
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<manialink version="3" name="FlagRush_MainUI">
	<frame id="timelimit" pos="140 -63">
		<quad pos="0 0" size="30 12" bgcolor="FFFA" id="background" halign="center" valign="center" z-index="-1" style="Bgs1" substyle="BgDialogBlur"/>
	
		<label pos="0 3" size="28 5" text="Timelimit:" id="label" style="TextValueSmallSm" halign="center" valign="center" textsize="2"/>
		<label pos="0 -2" z-index="1" size="28 6" text="00:00.00" id="value" style="TextRaceChrono" halign="center" valign="center" textsize="6"/>
	</frame>
	
	<frame id="flagcarrier" pos="135 -78">
		<quad pos="0 0" z-index="-1" size="40 14" bgcolor="FFFA" style="Bgs1" substyle="BgDialogBlur" halign="center" valign="center"/>
		
		<label pos="0 4" z-index="01" size="38 5" text="Flag position:" id="label" style="TextValueSmallSm" halign="center" valign="center" textsize="2"/>
		<label pos="0 -2" z-index="0" size="38 10" text="Playername" id="value" style="TextValueSmallSm" halign="center" valign="center" textsize="5"/>
	</frame>
	
	<script>
		<!--
		  #Include "ColorLib" as CL
			#Include "MathLib" as ML
		
			{{{GetTeamColorNetreadFunctions()}}}
		
			main() {
				
				/* Control references */
				
				declare CMlFrame FrameFlagCarrier = (Page.GetFirstChild("flagcarrier") as CMlFrame);
				declare CMlLabel LabelFlagCarrier = (FrameFlagCarrier.GetFirstChild("value") as CMlLabel);
				
				declare CMlFrame FrameTimeLimit = (Page.GetFirstChild("timelimit") as CMlFrame);
				declare CMlLabel LabelTimeLimit = (FrameTimeLimit.GetFirstChild("value") as CMlLabel);
				
				/* Netread variables */
				
				declare netread Integer Net_FlagCarrierClan for UI;
				declare netread Text Net_FlagCarrierName for UI;
				declare netread Integer Net_RoundTimeLeft for UI;
				declare netread Boolean Net_HideTimer for UI;
				
				while(True) {
					yield;
					
					/* Flag Carrier */
					
					declare CTeam Team = Null;
					if(Net_FlagCarrierClan > 0) Team <=> Teams[Net_FlagCarrierClan - 1];
					LabelFlagCarrier.TextPrefix = "$" ^ CL::RgbToHex3(GetTeamPrimaryColor(Team));
					LabelFlagCarrier.Value = Net_FlagCarrierName;
					
					/* Timer */
					
					FrameTimeLimit.Visible = !Net_HideTimer;
					
					if(!Net_HideTimer)
					{
						declare RoundMinutesLeft = Net_RoundTimeLeft / 60000;					
						declare RoundSecondsLeft = (Net_RoundTimeLeft - RoundMinutesLeft * 60000) / 1000;	// Just the portion
						
						declare Text PotentialNegativeSign;
						if(Net_RoundTimeLeft < 0) PotentialNegativeSign = "-";
						
						declare Text PotentialLeadingZero;
						if(ML::Abs(RoundSecondsLeft) < 10) PotentialLeadingZero = "0";
						
						declare RoundTimeLeftText = PotentialNegativeSign
																				^ ML::Abs(RoundMinutesLeft)
																				^ ":" ^ PotentialLeadingZero
																				^ ML::Abs(RoundSecondsLeft);
						
						LabelTimeLimit.Value = RoundTimeLeftText;
					}
				}
			}
		-->
	</script>
</manialink>
	""";
}