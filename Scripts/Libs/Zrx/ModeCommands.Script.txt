#Const C_UIPosition_Y 30.

#Struct K_QuickCommand {
    Text Name;
    Text IconStyle;
    Text IconSubstyle;
}

declare K_QuickCommand[] G_QuickCommands;

Text GetManialink() {
    declare Text FrameInstancesXml;
    for(I, 0, G_QuickCommands.count - 1) {
        FrameInstancesXml ^= """<frameinstance modelid="model-quick-command" pos="{{{12.5 * I}}}" id="quick-command-{{{I}}}"/>""";
    }

    declare Text QuickCommandReferences;
    for(I, 0, G_QuickCommands.count - 1) {
        QuickCommandReferences ^= """{
					declare CMlFrame FrameQuickCommand = (Page.GetFirstChild("quick-command-{{{I}}}") as CMlFrame);
					declare CMlQuad Icon = (FrameQuickCommand.GetFirstChild("icon") as CMlQuad);
					declare CMlLabel Label = (FrameQuickCommand.GetFirstChild("label") as CMlLabel);
		    	Icon.Style = "{{{G_QuickCommands[I].IconStyle}}}";
		    	Icon.Substyle = "{{{G_QuickCommands[I].IconSubstyle}}}";
		    	Label.Value = "{{{G_QuickCommands[I].Name}}}";
					QuickCommands[Icon] = Label;
		    }""";
	}

    return """
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<manialink version="3" name="ModeCommands">
<framemodel id="model-quick-command">
	<quad pos="0 0" z-index="0" size="10 10" bgcolor="000" halign="center" valign="center" opacity="0.5"/>
	<quad pos="0 0" z-index="1" size="10 10" bgcolor="FFF" halign="center" valign="center" style="Icons64x64_1" substyle="Add" scriptevents="1" id="icon"/>
	<label pos="5 -6" z-index="0" size="50 5" text="myLabelasdasdasd" textemboss="1" id="label" halign="right" valign="top" hidden="1"/>
</framemodel>

<frame id="commands-ui" pos="170 {{{C_UIPosition_Y}}}">
	<quad  z-index="0" size="10 10" bgcolor="FFF" style="Icons128x128_1" substyle="BackFocusable" scriptevents="1" halign="center" valign="center" id="toggle-menu"/>
	
	<frame id="quick-commands" pos="80">
		{{{FrameInstancesXml}}}
	</frame>
	
	<frame id="custom-command" pos="40">
		<quad pos="0 0" z-index="0" size="65 10" bgcolor="000" halign="center" valign="center" opacity="0.5"/>
		<quad pos="-30 0" z-index="0" size="45 5" bgcolor="000" halign="left" valign="center" opacity="0.5"/>
		<textedit pos="-30 0" z-index="2" size="45 5"  id="textedit-command" valign="center" halign="left" textsize="3" style="StyleTextScriptEditor" textcolor="fff"/>
		<label pos="30 0" z-index="2" size="20 5" text="$zî¥‹" valign="center" halign="right" style="CardButtonMediumXS" id="button-sendcommand" scriptevents="1"/>
	</frame>
</frame>

<script> <!--
#Include "TextLib" as TL
#Const C_MenuAnimDuration 1000

declare CMlFrame FrameMain;
declare CMlQuad QuadToggleMenu;
declare Boolean MenuState;

Void ToggleMenu(Boolean State) {
	declare Text PanelAnimTargetPos;
	declare Text ArrowAnimTargetRot;
	if (!State) {
		PanelAnimTargetPos = "155 {{{C_UIPosition_Y}}}";
		ArrowAnimTargetRot = "0";
	} else {
		PanelAnimTargetPos = "{{{85 - G_QuickCommands.count * 12.5}}} {{{C_UIPosition_Y}}}";
		ArrowAnimTargetRot = "180";
	}
	AnimMgr.Add(FrameMain, "<frame pos='"^PanelAnimTargetPos^"' />", C_MenuAnimDuration, CAnimManager::EAnimManagerEasing::QuintOut);
	AnimMgr.Add(QuadToggleMenu, "<frame rot='"^ArrowAnimTargetRot^"' />", C_MenuAnimDuration, CAnimManager::EAnimManagerEasing::QuintOut);
}

Void ToggleMenu() {
	MenuState = !MenuState;
	ToggleMenu(MenuState);
}

main() {
	/* Control References */
	FrameMain = (Page.GetFirstChild("commands-ui") as CMlFrame);
	QuadToggleMenu = (Page.GetFirstChild("toggle-menu") as CMlQuad);
	
	declare CMlFrame FrameCustomCommand = (Page.GetFirstChild("cuomst-command") as CMlFrame);
	declare CMlTextEdit TextEditCustomCommand = (Page.GetFirstChild("textedit-command") as CMlTextEdit);
	declare CMlLabel ButtonCustomCommandSend = (Page.GetFirstChild("button-sendcommand") as CMlLabel);
	
	declare CMlLabel[CMlQuad] QuickCommands;
    {{{QuickCommandReferences}}}	
	
	MenuState = False;
	ToggleMenu(MenuState);
	
	while(True) {
		yield;
		
		foreach (Event in PendingEvents) {
				switch (Event.Type) {
					case CMlScriptEvent::Type::MouseClick: {
						if (Event.Control == QuadToggleMenu) {
							ToggleMenu();
						} else if (Event.Control == ButtonCustomCommandSend) {
							declare Text[] CommandSplit = TL::Split(" ", TextEditCustomCommand.Value);
							if(CommandSplit.count >= 1) {
								SendCustomEvent(CommandSplit[0], CommandSplit.slice(1, CommandSplit.count - 1));
							}
							TextEditCustomCommand.Value = "";
						} else {
							if(QuickCommands.existskey(Event.Control as CMlQuad)) {
								SendCustomEvent(QuickCommands[Event.Control as CMlQuad].Value, []);
							}
						}
					}
					case CMlScriptEvent::Type::MouseOver: {
						if(QuickCommands.existskey(Event.Control as CMlQuad)) {
							QuickCommands[Event.Control as CMlQuad].Visible = True;
						}
					}
					case CMlScriptEvent::Type::MouseOut: {
						if(QuickCommands.existskey(Event.Control as CMlQuad)) {
							QuickCommands[Event.Control as CMlQuad].Visible = False;
						}					
					}
				}
			}
	}
}
--></script>
</manialink>
    """;
}

Void AddQuickCommand(Text Name, Text IconStyle, Text IconSubstyle) {
    declare K_QuickCommand command;
    command.Name = Name;
    command.IconStyle = IconStyle;
    command.IconSubstyle = IconSubstyle;
    G_QuickCommands.add(command);
}

Void ClearCommands() {
	G_QuickCommands.clear();
}