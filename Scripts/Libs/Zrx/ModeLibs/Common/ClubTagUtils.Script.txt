#Include "TextLib" as TL
#Include "ColorLib" as CL
#Include "MathLib" as ML

#Include "Libs/Zrx/ModeLibs/FlagRush/FlagRush_Common.Script.txt" as FlagRush_Common

#Const C_RegexPattern_NameHex3Color			"\\$[0-9a-fA-F]{3}"
#Const C_RegexPattern_TextFormat				"(\\$[0-9a-fA-F]{3})|(\\$[wWtTzZiIoOsSgGnNmM])|(\\$[hHlL](\\[.*\\])?)"
#Const C_TeamColorMinSaturation					0.5
#Const C_TeamColorMinValue							0.5
#Const C_InvalidColor										<0., 0., 0.>

#Struct K_TeamConfig {
	Text ClubTag;
	Text Name;
	Vec3 Color;
}

Vec3[] Private_FilterColors(Vec3[] ColorsRgb) {
	declare Vec3[] ValidColors = [];
	foreach (Color in ColorsRgb) {
		declare ColorHsv = CL::RgbToHsv(Color);
		if(ColorHsv.Y != 0 && ColorHsv.Z != 0) {
			ValidColors.add(Color);
		}
	}
	return ValidColors;
}

Vec3 Private_ChooseColor(Vec3[] ColorsRgb) {
	declare Vec3 TeamColor;
	declare Real MaxSPlusV = 0.;
	foreach (Color in ColorsRgb) {
		declare ColorHsv = CL::RgbToHsv(Color);
		declare ColorSPlusV = ColorHsv.Y + ColorHsv.Z;
		if (ColorSPlusV > MaxSPlusV) {
			MaxSPlusV = ColorSPlusV;
			TeamColor = Color;
		}
	}
	return TeamColor;
}

Vec3 ClubTagToColor(Text ClubTag) {
	// Get color texts from clubtag
	declare Text[] ClubTagColorsText = TL::RegexFind(C_RegexPattern_NameHex3Color, ClubTag, "g");

	declare Vec3[] ClubTagColors = [];
	foreach (ColorText in ClubTagColorsText) {
		ClubTagColors.add(CL::Hex3ToRgb(TL::SubText(ColorText, 1, 3)));
	}
	if (ClubTagColors.count < 1) return C_InvalidColor;

	declare Vec3[] ValidColors = Private_FilterColors(ClubTagColors);
	if (ValidColors.count < 1) return C_InvalidColor;

	declare Vec3 TeamColor = Private_ChooseColor(ValidColors);
	return FlagRush_Common::ColorToMinSaturationAndValue(TeamColor, C_TeamColorMinSaturation, C_TeamColorMinValue);
}

K_TeamConfig GetTeamConfig(Integer Clan) {
	declare K_TeamConfig TeamConfig;

	declare Text ClubTagTeam = "";
	declare Boolean ClubTagMissmatch;
	foreach (Player in Players) {
		if(Player.CurrentClan == Clan) {
			if(ClubTagTeam != "" && Player.User.ClubTag != ClubTagTeam) {
				ClubTagMissmatch = True;
				break;
			}
			else {
				ClubTagTeam = Player.User.ClubTag;
			}
		}
	}

	if(!ClubTagMissmatch) {
		TeamConfig.ClubTag = ClubTagTeam;
		TeamConfig.Name = TL::RegexReplace(C_RegexPattern_TextFormat, ClubTagTeam, "g", "");
		TeamConfig.Color = ClubTagToColor(ClubTagTeam);
	}

	return TeamConfig;
}