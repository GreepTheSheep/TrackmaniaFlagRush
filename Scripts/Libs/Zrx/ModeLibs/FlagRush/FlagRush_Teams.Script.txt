#Include "ColorLib"	as CL

#Include "Libs/Zrx/Common/ColorUtils.Script.txt"	as ColorUtils

#Include "Libs/Zrx/ModeLibs/Common/ClubTagUtils.Script.txt"					as ClubTagUtils

#Const	C_DefaultNeutralColor				<1., 1., 1.>
#Const	C_DefaultTeamName						"???"
#Const	C_DefaultTeamColors					[0 => <0.2, 0.2, 1.>	, 1 => <1., 0.2, 0.2>	]
#Const	C_DefaultTeamNames					[0 => "Team Blue"			, 1 => "Team Red"			]

#Const	C_HueOverlapThreshold				0.166

#Struct K_TeamConfig {
	Text ClubTag;
	Text Name;
	Vec3 Color;
}

declare K_TeamConfig[CTeam] G_TeamConfigs;

declare Text G_Team1NameOverride;
declare Text G_Team1ColorHexOverride;
declare Text G_Team2NameOverride;
declare Text G_Team2ColorHexOverride;

Void SetTeam1NameOverride(Text Name) {
	G_Team1NameOverride = Name;
}

Void SetTeam2NameOverride(Text Name) {
	G_Team2NameOverride = Name;
}

Void SetTeam1ColorHexOverride(Text ColorHex) {
	G_Team1ColorHexOverride = ColorHex;
}

Void SetTeam2ColorHexOverride(Text ColorHex) {
	G_Team2ColorHexOverride = ColorHex;
}

/**
 * Gets the team config by the given clan number (>= 1).
 */
K_TeamConfig GetConfig(Integer Clan) {
	return G_TeamConfigs.get(Teams[Clan-1], K_TeamConfig{});
}

/**
 * Gets the team config for the given team.
 */
K_TeamConfig GetConfig(CTeam Team) {
	return G_TeamConfigs.get(Team, K_TeamConfig{});
}

/**
 * Gets the default team color for a given clan.
 */
Vec3 GetDefaultTeamColor(Integer TeamNum) {
	return C_DefaultTeamColors.get(TeamNum-1, C_DefaultNeutralColor);
}

/**
 * Gets the default team name for a given clan.
 */
Text GetDefaultTeamName(Integer TeamNum) {
	return C_DefaultTeamNames.get(TeamNum-1, C_DefaultTeamName);
}

/**
 * Initialises the team configs.
 */
Void Init() {	
	// Get TeamConfigs from ClubTags
	declare ClubTagUtils::K_TeamConfig[] TeamConfigs = [
		ClubTagUtils::GetTeamConfig(1),
		ClubTagUtils::GetTeamConfig(2)
	];
	
	// Overwrite empty values or forced values
	if (G_Team1NameOverride != "") TeamConfigs[0].Name = G_Team1NameOverride;					// Forced
	else if (TeamConfigs[0].Name == "") TeamConfigs[0].Name = GetDefaultTeamName(1);	// Was Empty
	
	if (G_Team2NameOverride != "") TeamConfigs[1].Name = G_Team2NameOverride;
	else if (TeamConfigs[1].Name == "") TeamConfigs[1].Name = GetDefaultTeamName(2);
	
	if (G_Team1ColorHexOverride != "") TeamConfigs[0].Color = CL::Hex3ToRgb(G_Team1ColorHexOverride);
	else if (TeamConfigs[0].Color == ClubTagUtils::C_InvalidColor) TeamConfigs[0].Color = GetDefaultTeamColor(1);
	
	if (G_Team2ColorHexOverride != "") TeamConfigs[1].Color = CL::Hex3ToRgb(G_Team2ColorHexOverride);
	else if (TeamConfigs[1].Color == ClubTagUtils::C_InvalidColor) TeamConfigs[1].Color = GetDefaultTeamColor(2);
	
	// Adjust colors to avoid hue overlap
	// Only adjust if at least one team color is not forced by settings
	if(G_Team1ColorHexOverride == "" || G_Team2ColorHexOverride == "") {
		// If second is forced or second team uses ClubTag and first doesn't: Adjust first
		if(G_Team2ColorHexOverride != "" || TeamConfigs[1].ClubTag != "" && TeamConfigs[0].ClubTag == "") {
			TeamConfigs[0].Color = ColorUtils::AdjustHueOverlap(TeamConfigs[1].Color, TeamConfigs[0].Color, C_HueOverlapThreshold);
		}
		// If first is forced or first team uses ClubTag or none is forced or both use ClubTags: Adjust second
		else {
			TeamConfigs[1].Color = ColorUtils::AdjustHueOverlap(TeamConfigs[0].Color, TeamConfigs[1].Color, C_HueOverlapThreshold);
		}
	}
	
	// Put in global variable array and configure actual teams
	for(TeamIndex, 0, 1) {
		G_TeamConfigs[Teams[TeamIndex]] = TeamConfigs[TeamIndex];

		Teams[TeamIndex].Name = TeamConfigs[TeamIndex].Name;
		declare Vec3 PrimaryColor = TeamConfigs[TeamIndex].Color;
		
		// Teams have automatic change for colors; Need full saturation and value (HSV)
		Teams[TeamIndex].ColorPrimary = ColorUtils::ColorToFullSaturationAndValue(PrimaryColor);
		Teams[TeamIndex].ColorSecondary = ColorUtils::ColorToFullSaturationAndValue(PrimaryColor);
		
		// Use "declare for" for actual colors for UI. Player Markers still use Teams[I].ColorPrimary
		declare Vec3 ColorPrimaryUI for Teams[TeamIndex];
		ColorPrimaryUI = PrimaryColor;
		
		declare netwrite Vec3 Net_FlagRush_PrimaryColor for Teams[TeamIndex];
		Net_FlagRush_PrimaryColor = PrimaryColor;
	}
}