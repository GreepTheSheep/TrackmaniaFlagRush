// #RequireContext CSmMode

#Include	"Libs/Zrx/ModeLibs/FlagRush/UI/UIShared.Script.txt" as UIShared
#Include	"Libs/Zrx/ModeLibs/FlagRush/FlagRush_Common.Script.txt" as FlagRush_Common

Text GetManialink() {	
	return """
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<manialink version="3" name="FlagRush_ScoresHeader">
	<frame halign="center" valign="top" pos="0 83" scale="1">
		<frame id="mapscores" pos="0 2.5">
			<quad pos="0 0" z-index="-1" size="60 8" bgcolor="FFF" valign="center" style="UICommon64_1" substyle="BgFrameTilted1" colorize="000" halign="center" scale="0.5"/>
			<label pos="0 0.25" z-index="0" size="30 10" text="Round Wins" halign="center" valign="center" textfont="GameFontRegular" textsize="1"/>

			<quad pos="-30 0" z-index="0" size="60 8" id="mapscore-background-team1" valign="center" halign="center" style="UICommon64_1" substyle="BgFrameTilted1" colorize="004" scale="0.5"/>
			<quad pos="30 0" z-index="0" size="60 8" id="mapscore-background-team2" valign="center" halign="center" style="UICommon64_1" substyle="BgFrameTilted1" colorize="400" scale="0.5"/>
			<gauge pos="-30 0" z-index="2" size="8 3" id="mapscore-gauge-team1" color="00F" halign="center" valign="center" style="ProgressBar" drawbg="0" drawblockbg="0" ratio="0.5"/>
			<gauge pos="-30 0" z-index="1" size="8 3" id="mapscore-gauge-team1-background" color="FFF" halign="center" valign="center" style="ProgressBar" drawbg="0" ratio="1" grading="0.5"/>
			<gauge pos="30 0" z-index="2" size="8 3" id="mapscore-gauge-team2" color="F00" valign="center" style="ProgressBar" halign="center" drawbg="0" ratio="0.5" grading="0.5" drawblockbg="0"/>
			<gauge pos="30 0" z-index="1" size="8 3" id="mapscore-gauge-team2-background" color="FFF" halign="center" valign="center" style="ProgressBar" drawbg="0" grading="0.5"/>
		</frame>

		<frame id="main">
			<frame id="team-stats">
				<quad pos="-50 0" z-index="0" size="12 8" valign="top" halign="right" id="team1-score-background" style="UICommon64_1" substyle="BgFrame1" colorize="00f"/>
				<quad pos="50 0" z-index="0" size="12 8" halign="left" id="team2-score-background" style="UICommon64_1" substyle="BgFrame1" colorize="f00"/>
				<label pos="-30 -4.5" z-index="1" size="38 8" text="CarrierTeam Blue" halign="center" textsize="4" id="team1-name" textfont="GameFontRegular" valign="center2"/>
				<label pos="30 -4.5" z-index="1" size="38 8" text="CarrierTeam Red" valign="center2" halign="center" textsize="4" id="team2-name" textfont="GameFontRegular"/>
				<label pos="-56 -4.5" z-index="2" size="12 8" text="0" halign="center" valign="center2" textsize="5" id="team1-score" textfont="GameFontBlack" />
				<label pos="56 -4.5" z-index="2" size="12 10" text="0" halign="center" valign="center2" textsize="5" id="team2-score" textfont="GameFontBlack"/>
				<quad id="team2-score-background2" pos="0 0" z-index="0" size="60 8" opacity="1" halign="left" colorize="400" style="UICommon64_1" substyle="BgFrame1"/>
				<quad id="team1-score-background2" pos="0 0" z-index="0" size="60 8" opacity="1" halign="right" colorize="004" style="UICommon64_1" substyle="BgFrame1"/>
			</frame>

			<frame id="center" pos="0 -4" z-index="1">
				<quad pos="0 0" size="20 8" id="background" valign="center" z-index="-1" style="UICommon64_1" substyle="BgFrame1" halign="center" colorize="000"/>

				<label pos="0 0" z-index="1" size="25 8" text="00:00.00" id="timelimit" halign="center" valign="center" textsize="2" textfont="GameFontSemiBold"/>
				<quad pos="0 0" z-index="1" size="8 8" opacity="1" halign="center" valign="center" style="UIConstruction_Buttons" substyle="Validate" id="center-flag"/>
			</frame>

			<frame id="flagcarrier" pos="0 -10" z-index="-2">
				<label pos="0 -0.5" z-index="0" size="60 8" text="Playername" id="value" halign="center" valign="center" textsize="3" textfont="GameFontRegular" />
				<quad pos="0 0" z-index="0" size="60 8" opacity="1" colorize="000" halign="center" valign="center" style="UICommon64_1" substyle="BgFrame2"/>		
			</frame>
		</frame>
	</frame>
	<script><!--
		#Include "MathLib" as ML
		#Include "TextLib" as TL	
		#Include "ColorLib" as CL
			
		{{{UIShared::GetTeamColorNetreadFunctions()}}}
		
		main() {
			/* MlControl references */
			// Mapscore, Round Wins
			declare CMlFrame FrameMapScores = (Page.GetFirstChild("mapscores") as CMlFrame);
			declare CMlQuad QuadTeam1MapScoreBackground = (Page.GetFirstChild("mapscore-background-team1") as CMlQuad);
			declare CMlQuad QuadTeam2MapScoreBackground = (Page.GetFirstChild("mapscore-background-team2") as CMlQuad);
			declare CMlGauge GaugeMapScoreTeam1 = (Page.GetFirstChild("mapscore-gauge-team1") as CMlGauge);
			declare CMlGauge GaugeMapScoreTeam1Background = (Page.GetFirstChild("mapscore-gauge-team1-background") as CMlGauge);
			declare CMlGauge GaugeMapScoreTeam2 = (Page.GetFirstChild("mapscore-gauge-team2") as CMlGauge);
			declare CMlGauge GaugeMapScoreTeam2Background = (Page.GetFirstChild("mapscore-gauge-team2-background") as CMlGauge);

			// Main Stats
			declare CMlFrame FrameMain = (Page.GetFirstChild("main") as CMlFrame);
			declare CMlLabel LabelTeam1Name = (Page.GetFirstChild("team1-name") as CMlLabel);
			declare CMlLabel LabelTeam2Name = (Page.GetFirstChild("team2-name") as CMlLabel);
			declare CMlLabel LabelTeam1Score = (Page.GetFirstChild("team1-score") as CMlLabel);
			declare CMlLabel LabelTeam2Score = (Page.GetFirstChild("team2-score") as CMlLabel);
			declare CMlQuad QuadTeam1ScoreBackground = (Page.GetFirstChild("team1-score-background") as CMlQuad);
			declare CMlQuad QuadTeam2ScoreBackground = (Page.GetFirstChild("team2-score-background") as CMlQuad);
			declare CMlQuad QuadTeam1ScoreBackground2 = (Page.GetFirstChild("team1-score-background2") as CMlQuad);
			declare CMlQuad QuadTeam2ScoreBackground2 = (Page.GetFirstChild("team2-score-background2") as CMlQuad);

			// Center (Timer/Flag)
			declare CMlFrame FrameCenter = (Page.GetFirstChild("center") as CMlFrame);
			declare CMlLabel LabelTimeLimit = (FrameCenter.GetFirstChild("timelimit") as CMlLabel);
			declare CMlQuad QuadCenterFlag = (Page.GetFirstChild("center-flag") as CMlQuad);

			// Flag Carrier
			declare CMlFrame FrameFlagCarrier = (Page.GetFirstChild("flagcarrier") as CMlFrame);
			declare CMlLabel LabelFlagCarrier = (FrameFlagCarrier.GetFirstChild("value") as CMlLabel);
			
			/* Netread variables */
			declare netread Integer Net_FlagRush_NbMapsToWinMatch for Teams[0];
			declare netread Integer Net_FlagRush_NbRoundsToWinMap for Teams[0];
			
			declare netread Integer Net_FlagRush_FlagCarrierClan for Teams[0];
			declare netread Text Net_FlagRush_FlagCarrierName for Teams[0];
			declare netread Integer Net_FlagRush_EndTime for Teams[0];
			declare netread Integer Net_FlagRush_GameplayPhase for Teams[0];	

			/* Main Loop */
			while(True) {
				yield;
				
				/* Team names and colors */
				LabelTeam1Name.Value = Teams[0].Name;
				LabelTeam2Name.Value = Teams[1].Name;

				declare Vec3 ColorTeam1 = GetTeamPrimaryColor(Teams[0]);
				declare Vec3 ColorTeam2 = GetTeamPrimaryColor(Teams[1]);
				declare Vec3 ColorTeam1Dark = CL::RgbToHsv(ColorTeam1);
				ColorTeam1Dark.Z /= 3;
				ColorTeam1Dark = CL::HsvToRgb(ColorTeam1Dark);
				declare Vec3 ColorTeam2Dark = CL::RgbToHsv(ColorTeam2);
				ColorTeam2Dark.Z /= 3;
				ColorTeam2Dark = CL::HsvToRgb(ColorTeam2Dark);
	
				QuadTeam1ScoreBackground.Colorize = ColorTeam1;
				QuadTeam2ScoreBackground.Colorize = ColorTeam2;
	
				QuadTeam1ScoreBackground2.Colorize = ColorTeam1Dark;
				QuadTeam2ScoreBackground2.Colorize = ColorTeam2Dark;
				QuadTeam1MapScoreBackground.Colorize = ColorTeam1Dark;
				QuadTeam2MapScoreBackground.Colorize = ColorTeam2Dark;
				
				GaugeMapScoreTeam1.Color = GetTeamPrimaryColor(Teams[0]);
				GaugeMapScoreTeam2.Color = GetTeamPrimaryColor(Teams[1]);	

				/* General */
				declare CTeam FlagCarrierTeam = Null;
				if (Net_FlagRush_FlagCarrierClan > 0) FlagCarrierTeam <=> Teams[Net_FlagRush_FlagCarrierClan - 1];
				
				/* Timer */
				declare Integer RoundTimeLeft = Net_FlagRush_EndTime - GameTime;
				declare Boolean IsTimeLeft = RoundTimeLeft > 0;
				LabelTimeLimit.Visible = IsTimeLeft;

				declare Text RoundTimeLeftText = "00:00";
				if(IsTimeLeft) {
					declare RoundMinutesLeft = RoundTimeLeft / 60000;					
					declare RoundSecondsLeft = (RoundTimeLeft - RoundMinutesLeft * 60000) / 1000;	// Just the portion
				
					declare Text PotentialLeadingZero;
					if (ML::Abs(RoundSecondsLeft) < 10) PotentialLeadingZero = "0";
					RoundTimeLeftText = ML::Abs(RoundMinutesLeft)
									^ ":" ^ PotentialLeadingZero
									^ ML::Abs(RoundSecondsLeft);
				}
				
				/* Center Flag or TimeLimit */
				LabelTimeLimit.TextPrefix = "$fff";
				LabelTimeLimit.Value = RoundTimeLeftText;
				LabelTimeLimit.Visible = IsTimeLeft;
				QuadCenterFlag.Visible = !IsTimeLeft;	
				QuadCenterFlag.Colorize = GetTeamPrimaryColor(FlagCarrierTeam);

				/* Flag Carrier */
				LabelFlagCarrier.TextPrefix = "$" ^ CL::RgbToHex3(GetTeamPrimaryColor(FlagCarrierTeam));
				LabelFlagCarrier.Value = Net_FlagRush_FlagCarrierName;
				
				/* Override in special cases */
				switch(Net_FlagRush_GameplayPhase) {
					case {{{FlagRush_Common::C_GameplayPhase_Warmup}}}: {	
						LabelTimeLimit.TextPrefix = "$f90";		
						LabelFlagCarrier.TextPrefix = "$f90";
						LabelFlagCarrier.Value = "WarmUp";
						QuadCenterFlag.Colorize = {{{FlagRush_Common::C_DefaultNeutralColor}}};
					}
					case {{{FlagRush_Common::C_GameplayPhase_Overtime}}}: {
						LabelTimeLimit.TextPrefix = "$f90";
						LabelTimeLimit.Value = "Overtime";
						LabelTimeLimit.Visible = True;
						QuadCenterFlag.Visible = False;
					}
				}
				
				/* Round score */
				for (Clan, 1, 2) {
					declare netread Integer Net_FlagRush_TeamRoundScore for Teams[Clan-1];
					if (Clan == 1) LabelTeam1Score.Value = TL::ToText(Net_FlagRush_TeamRoundScore);
					if (Clan == 2) LabelTeam2Score.Value = TL::ToText(Net_FlagRush_TeamRoundScore);
				}
				
				/* Map score */				
				declare Boolean ShowRoundWins = Net_FlagRush_NbRoundsToWinMap >= 2;
				FrameMapScores.Visible = ShowRoundWins;
				FrameMain.RelativePosition_V3.Y = 3.5;
				if(ShowRoundWins) {
					FrameMain.RelativePosition_V3.Y = 0.;
					
					// Gauge grading				
					declare Real GradingRatio = 1. / Net_FlagRush_NbRoundsToWinMap;
					
					declare Real GaugeWidth = ML::Min(4. * Net_FlagRush_NbRoundsToWinMap, 25.);
					GaugeMapScoreTeam1.Size = <GaugeWidth, 3.>;
					GaugeMapScoreTeam1.GradingRatio = GradingRatio;

					GaugeMapScoreTeam1Background.Size = <GaugeWidth, 3.>;
					GaugeMapScoreTeam1Background.GradingRatio = GradingRatio;

					GaugeMapScoreTeam2.Size = <GaugeWidth, 3.>;
					GaugeMapScoreTeam2.GradingRatio = GradingRatio;
					
					GaugeMapScoreTeam2Background.Size = <GaugeWidth, 3.>;												
					GaugeMapScoreTeam2Background.GradingRatio = GradingRatio;
						
					// Gauge Ratio
					for (Clan, 1, 2) {
						declare netread Integer Net_FlagRush_TeamMapScore for Teams[Clan-1];
						declare GaugeRatioTeam = ML::Min((0. + Net_FlagRush_TeamMapScore) / Net_FlagRush_NbRoundsToWinMap, 1.);
						if (Clan == 1) GaugeMapScoreTeam1.Ratio = GaugeRatioTeam;
						if (Clan == 2) GaugeMapScoreTeam2.Ratio = GaugeRatioTeam;
					}
				}
			}
		}
	--></script>
</manialink>
""";
}