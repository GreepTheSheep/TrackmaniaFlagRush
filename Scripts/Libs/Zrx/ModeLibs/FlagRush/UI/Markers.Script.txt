//#RequireContext CMlScriptIngame

#Include	"Libs/Zrx/ModeLibs/FlagRush/UI/UIShared.Script.txt" as UIShared

Text GetManialink(Integer NbBasesPerTeam, Integer TotalFlagAmount) {
	
	declare Text BasesFrameInstancesXml;
	for(I, 0, NbBasesPerTeam-1) {
		BasesFrameInstancesXml ^= """
		<frameinstance modelid="model-marker-base" id="marker-base-team1-{{{I}}}" hidden="1"/>
		<frameinstance modelid="model-marker-base" id="marker-base-team2-{{{I}}}" hidden="1"/>
		""";
	}

	declare Text FlagsFrameInstancesXml;
	for(I, 0, TotalFlagAmount-1) {
		FlagsFrameInstancesXml ^= """
		<frameinstance modelid="model-marker-flag" id="marker-flag-{{{I}}}" scale="0.7"/>		
		""";
	}
	
	return """
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
	<manialink version="3" name="FlagRush_Markers">
		
		<framemodel id="model-marker-base">
			<quad pos="0 0" z-index="1" size="10 10" bgcolor="FFFA" style="ManiaPlanetMainMenu" substyle="IconHome" halign="center" valign="center" colorize="fff" id="quad-base"/>
		</framemodel>

		<framemodel id="model-marker-flag">
			<quad pos="0 0" z-index="2" size="10 10" bgcolor="FFFA" halign="center" valign="center" style="UIConstruction_Buttons" substyle="Validate" id="quad-flag"/>
			<gauge pos="0 7.5" z-index="0" size="20 7.5" valign="center" halign="center" clan="0" style="EnergyBar" drawbg="0" id="gauge-flag" hidden="1"/>
		</framemodel>

		{{{BasesFrameInstancesXml}}}
		<frameinstance modelid="model-marker-flag" id="marker-flag" hidden="1"/>
		{{{FlagsFrameInstancesXml}}}

		<script><!--
			#Include "MathLib" as ML
			
			{{{UIShared::GetTeamColorNetreadFunctions()}}}
		
			main() {
				declare CMlFrame[] Team1BaseMarkerFrames;
				declare CMlFrame[] Team2BaseMarkerFrames;
				for(I, 0, {{{NbBasesPerTeam-1}}}) {
					declare CMlFrame FrameMarkerBase1 = (Page.GetFirstChild("marker-base-team1-" ^ I) as CMlFrame);
					Team1BaseMarkerFrames.add(FrameMarkerBase1);
					
					declare CMlFrame FrameMarkerBase2 = (Page.GetFirstChild("marker-base-team2-" ^ I) as CMlFrame);
					Team2BaseMarkerFrames.add(FrameMarkerBase2);
				}
				
				declare CMlFrame FrameMarkerFlag = (Page.GetFirstChild("marker-flag") as CMlFrame);
				declare CMlQuad QuadMarkerFlag = (FrameMarkerFlag.GetFirstChild("quad-flag") as CMlQuad);
				declare CMlGauge GaugeMarkerFlag = (FrameMarkerFlag.GetFirstChild("gauge-flag") as CMlGauge);
				QuadMarkerFlag.Colorize = GetTeamPrimaryColor(Null);
				
				declare netread Integer Net_FlagRush_FlagCarrierClan for Teams[0];
				
				declare netread Integer Net_FlagRush_FlagGaugeStartDate for Teams[0];
				declare netread Integer Net_FlagRush_FlagGaugeDuration for Teams[0];
							
				while(True) {
					yield;
					
					/* Colors */
					
					// Get the right color for the flag
					declare Vec3 FlagColor = GetTeamPrimaryColor(Null);
					if (Net_FlagRush_FlagCarrierClan > 0) FlagColor = GetTeamPrimaryColor(Teams[Net_FlagRush_FlagCarrierClan - 1]);
					
					// Apply colors
					QuadMarkerFlag.Colorize = FlagColor;
					GaugeMarkerFlag.Color = FlagColor;

					foreach (MarkerFrame in Team1BaseMarkerFrames) {
						(MarkerFrame.GetFirstChild("quad-base") as CMlQuad).Colorize = GetTeamPrimaryColor(Teams[0]);
					}
					foreach (MarkerFrame in Team2BaseMarkerFrames) {
						(MarkerFrame.GetFirstChild("quad-base") as CMlQuad).Colorize = GetTeamPrimaryColor(Teams[1]);
					}
					
					/* Gauge animation */
					
					// Flag gauge end in future
					if (Net_FlagRush_FlagGaugeStartDate + Net_FlagRush_FlagGaugeDuration > GameTime) {
						log("Net_FlagRush_FlagGaugeStartDate: " ^ Net_FlagRush_FlagGaugeStartDate);
						log("Net_FlagRush_FlagGaugeDuration: " ^ Net_FlagRush_FlagGaugeDuration);
						log("GameTime: " ^ GameTime);
						declare Ratio = (0. + Net_FlagRush_FlagGaugeDuration - (GameTime - Net_FlagRush_FlagGaugeStartDate)) / Net_FlagRush_FlagGaugeDuration;
						declare AdjustedRatio = ML::Clamp(0.2 + Ratio * 0.8, 0.2, 1.0);	// Somehow the gauge ends at 0.2? Also clamp, as we had an exception before
						GaugeMarkerFlag.Ratio = AdjustedRatio;
						GaugeMarkerFlag.Visible = True;
						QuadMarkerFlag.Opacity = 0.5;
					}
					// Flag gauge already finished
					else {	// Flag respawn already happened
						GaugeMarkerFlag.Visible = False;
						QuadMarkerFlag.Opacity = 1.;
					}
				}
			}
		--></script>
</manialink>
	""";
}
