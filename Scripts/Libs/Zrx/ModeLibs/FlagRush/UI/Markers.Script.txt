//#RequireContext CMlScriptIngame

#Include	"Libs/Zrx/ModeLibs/FlagRush/UI/Shared.Script.txt" as UIShared

Text GetManialink(Integer NbBasesPerTeam, Integer TotalFlagAmount) {
	
	declare Text BasesFrameInstancesXml;
	for(I, 0, NbBasesPerTeam-1) {
		BasesFrameInstancesXml ^= """
		<frameinstance modelid="model-marker-base" id="marker-base-team1-{{{I}}}" hidden="1"/>
		<frameinstance modelid="model-marker-base" id="marker-base-team2-{{{I}}}" hidden="1"/>
		""";
	}

	declare Text FlagsFrameInstancesXml;
	for(I, 0, TotalFlagAmount-1) {
		FlagsFrameInstancesXml ^= """
		<frameinstance modelid="model-marker-flag" id="marker-flag-{{{I}}}" scale="0.7"/>		
		""";
	}
	
	return """
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
	<manialink version="3" name="FlagRush_Markers">
		
		<framemodel id="model-marker-base">
			<quad pos="0 0" z-index="1" size="10 10" bgcolor="FFFA" style="ManiaPlanetMainMenu" substyle="IconHome" halign="center" valign="center" colorize="fff" id="quad-base"/>
		</framemodel>

		<framemodel id="model-marker-flag">
			<quad pos="0 0" z-index="2" size="10 10" bgcolor="FFFA" halign="center" valign="center" style="UIConstruction_Buttons" substyle="Validate" id="quad-flag"/>
			<gauge pos="0 7.5" z-index="0" size="20 7.5" valign="center" halign="center" clan="0" style="EnergyBar" drawbg="0" id="gauge-flag" hidden="1"/>
		</framemodel>

		{{{BasesFrameInstancesXml}}}
		<frameinstance modelid="model-marker-flag" id="marker-flag" hidden="1"/>
		{{{FlagsFrameInstancesXml}}}

		<script><!--
			
			{{{UIShared::GetTeamColorNetreadFunctions()}}}
		
			main() {
				for(I, 0, {{{NbBasesPerTeam-1}}}) {
					declare CMlFrame FrameMarkerBase1 = (Page.GetFirstChild("marker-base-team1-" ^ I) as CMlFrame);
					declare CMlQuad QuadMarkerBase1 = (FrameMarkerBase1.GetFirstChild("quad-base") as CMlQuad);
					QuadMarkerBase1.Colorize = GetTeamPrimaryColor(Teams[0]);
					
					declare CMlFrame FrameMarkerBase2 = (Page.GetFirstChild("marker-base-team2-" ^ I) as CMlFrame);
					declare CMlQuad QuadMarkerBase2 = (FrameMarkerBase2.GetFirstChild("quad-base") as CMlQuad);
					QuadMarkerBase2.Colorize = GetTeamPrimaryColor(Teams[1]);
				}
				
				declare CMlFrame FrameMarkerFlag = (Page.GetFirstChild("marker-flag") as CMlFrame);
				declare CMlQuad QuadMarkerFlag = (FrameMarkerFlag.GetFirstChild("quad-flag") as CMlQuad);
				declare CMlGauge GaugeMarkerFlag = (FrameMarkerFlag.GetFirstChild("gauge-flag") as CMlGauge);
				QuadMarkerFlag.Colorize = GetTeamPrimaryColor(Null);
				
				declare netread Integer Net_FlagCarrierClan for Teams[0];
				declare netread Boolean Net_HideFlagMarker for UI;
				
				declare netread Integer Net_FlagGaugeStartServerDate for Teams[0];
				declare netread Integer Net_FlagGaugeDuration for Teams[0];
				declare Integer LastFlagGaugeStartServerDate;
				declare Integer FlagGaugeStartDate;
							
				while(True) {
					yield;
					
					/* Hide when requested */
					
					if (Net_HideFlagMarker) {
						GaugeMarkerFlag.Visible = False;
						QuadMarkerFlag.Visible = False;
						continue;
					}
					
					QuadMarkerFlag.Visible = True;
					
					/* Colors */
					
					// Get the right color
					declare Vec3 CurrentColor = GetTeamPrimaryColor(Null);
					if (Net_FlagCarrierClan > 0) CurrentColor = GetTeamPrimaryColor(Teams[Net_FlagCarrierClan - 1]);
					
					// Apply color
					QuadMarkerFlag.Colorize = CurrentColor;
					GaugeMarkerFlag.Color = CurrentColor;
					
					/* Gauge animation */
					
					// Server CSmMode.Now is not Client CMlScript.Now (?), Get local timing equivalents
					if(Net_FlagGaugeStartServerDate > LastFlagGaugeStartServerDate) {
						LastFlagGaugeStartServerDate = Net_FlagGaugeStartServerDate;
						FlagGaugeStartDate = Now;
					}
					
					// Flag gauge end in future
					if (FlagGaugeStartDate + Net_FlagGaugeDuration > Now) {
						declare Ratio = (0. + Net_FlagGaugeDuration - (Now - FlagGaugeStartDate)) / Net_FlagGaugeDuration;
						GaugeMarkerFlag.Ratio = 0.2 + Ratio * 0.8;
						GaugeMarkerFlag.Visible = True;
						QuadMarkerFlag.Opacity = 0.5;
					}
					// Flag gauge already finished
					else {	// Flag respawn already happened
						GaugeMarkerFlag.Visible = False;
						QuadMarkerFlag.Opacity = 1.;
					}
				}
			}
		--></script>
</manialink>
	""";
}
