/*
ADVANCED MINIMAP by MRLAG

------------------------------------------------------------------------------------------

WARNING: When the Minimap is built, new markers cannot be added.

CreateMarker:
This will create an instance of a marker with its corresponding scripts.

_Id                         Unique Integer used to indicate itself
_FrameId:                   Unique Text used to indicate its manialink frame
_FrameManialink             Manialink within the frame describing the marker.

_AbsoluteSetScript          Maniascript setting the absolute values (rotation and position) within the world map.
These are the variables that can be set in this part:
Vec2 AbsPos     (Absolute position is sunits)
Real AbsRot     (Absolute rotation in radians)
Bool IsHidden   (Is the marker hidden?)
You can use values from other markers with AbsolutePositions[Id] and AbsoluteRotations[Id] if they are set.

_AbsoluteToRelativeScript   Maniascript setting the relative values (rotation and position) within the minimap.
These are the variables that can be set in this part:
Vec2 RelPos     (Relative position is sunits)
Real RelRot     (Relative rotation in radians)
Bool IsHidden   (Is the marker hidden?)
You can use values from other markers with AbsolutePositions[Id], AbsoluteRotations[Id], RelativePositions[Id], RelativeRotations[Id] if they are set.
You have also access to AbsPos and AbsRot, the absolute values defined before.

_FinalInScript              Maniascript setting the relative values (rotation and position) within the minimap if in bounds.
Here, the bounds are [- MinimapSize, MinimapSize]
These are the variables that can be set in this part:
Vec2 FinPos     (Relative position is sunits)
Real FinRot     (Relative rotation in radians)
Bool IsHidden   (Is the marker hidden?)
You can use values from other markers with AbsolutePositions[Id], AbsoluteRotations[Id], RelativePositions[Id], RelativeRotations[Id], FinalPositions[Id], FinaleRotations[Id] if they are set.
You have also access to RelPos and RelRot, the relative values defined before.
This is also where you should modify the marker's controls properties.

_FinalOutScript        Maniascript setting the relative values (rotation and position) within the minimap if out of bounds.
Here, the bounds are [- MinimapSize, MinimapSize]
These are the variables that can be set in this part:
Vec2 FinPos     (Relative position is sunits)
Real FinRot     (Relative rotation in radians)
Bool IsHidden   (Is the marker hidden?)
You can use values from other markers with AbsolutePositions[Id], AbsoluteRotations[Id], RelativePositions[Id], RelativeRotations[Id], FinalPositions[Id], FinaleRotations[Id] if they are set.
You have also access to RelPos and RelRot, the relative values defined before.
This is also where you should modify the marker's controls properties.

BuildMinimap:
This will build the Layer of the minimap and will return it.

_MinimapSetScript           Maniascript setting the minimap properties.
These are the variables that can be set in this part:
Real MinimapZoom        (Zoom)
Vec2 MinimapOffset      (Offset from its center in sunits)
Real MinimapRotation    (Rotation aroud the center in radians)
Vec2 MinimapPosition    (Position on screen in mlunits)
Real MinimapSize        (Relative crop of the minimap)
You can use values from markers with AbsolutePositions[Id] and AbsoluteRotations[Id].

_BackgroundManialink        Manialink used as minimap background

_BackgroundScript           Maniascript called when everything is set. Write stuff if your background needs to change (i.e. size)
Code snippets to modify the background size (with 'MinimapImg' as the quad's id)
declare Pic <=> (Minimap.GetFirstChild("MinimapImg") as CMlQuad);
Pic.Size = <100., 100.> * MinimapZoom;

_StylesManialink            Manialink part to insert own styles.

_PreMainScript              Maniascript part inserted before main where you can add constants, structs and functions.

------------------------------------------------------------------------------------------

Details about units:
Markers are placed on the minimap using sunits (small units).
The world map borders are [-1, 1] and the center is (0, 0).

mlunits are Manialink units.

------------------------------------------------------------------------------------------

Maniascript tips:
- The Rotate function is given to rotate a 2D vector
- When working with world units (i.e. player position), divide the position by the world size (usually length in blocks * 32).
Then substract <0.5, 0.5> and multiply by 2 to make the position within the [-1, 1] range.
- You can use 'Minimap.GetFirstChild(C_MarkerFrameIds[MarkerId])' to retrieve the marker frame and its control.
- You can 'declare for Page' to communicate data from and to the outside.
- The default minimap size is <100., 100.>
- You have access to TextLib with TL and MathLib with ML

------------------------------------------------------------------------------------------

Tutorial on how to get a decent minimap:
1 - Find the value of the world size. (usually length in blocks * 32)
2 - Load an empty map and place 4 platform block at each corner.
3 - Open the map intro Mediatracker.
4 - Add a "fog" block to remove the fog and clouds.
5 - Add a "custom camera".
6 - Set its parameters to:
X = WorldSize / 2
Z = WorldSize / 2
Pitch = 90
Yaw = 0
Roll = 0
FOV = 5
7 - Set the Y coordinate so that you can see the whole buildable area.
8 - Render a square screen. The 4 blocks must be in and each must sit in a corner. If not, update Y until you get it.
Your result should look like the image given with this script (Example.jpg)
You can be a few pixel off, it's not a big issue.
9 - Remember your Y setting.
10- Open the map used for the minimap.
11- Repeat steps 3 to 6.
12- Set your Y setting.
13- Render a square screen.

------------------------------------------------------------------------------------------

Example.Script.txt shows an example on how it can be used. Replace <PlayerIcon> and <BackgroundImg> by their corresponding image file path.

*/

// #RequireContext CSmMode

#Include "TextLib" as TL

#Struct Marker {
    Text FrameId;
    Text FrameManialink;
    
    // Script setting the marker and its absolute position and rotation
    Text AbsoluteSetScript;
    
    // Script setting relative position and rotation after minimap set
    Text AbsoluteToRelativeScript;
    
    // Script giving info on how the marker should behave if in or out of bounds
    Text FinalInScript;
    Text FinalOutScript;
}

declare Marker[Integer] G_Markers;

// Script setting minimap zoom, size, position, offset and rotation
declare Text G_MinimapSetScript;

Void ClearMarkers() {
	G_Markers.clear();
}

Void CreateMarker(Integer _Id, Text _FrameId, Text _FrameManialink, Text _AbsoluteSetScript, Text _AbsoluteToRelativeScript, Text _FinalInScript, Text _FinalOutScript) {
    G_Markers[_Id] = Marker{FrameId = _FrameId, FrameManialink = _FrameManialink, AbsoluteSetScript = _AbsoluteSetScript, AbsoluteToRelativeScript = _AbsoluteToRelativeScript, FinalInScript = _FinalInScript, FinalOutScript = _FinalOutScript};
}

Text GetManialink(Text _MinimapSetScript, Text _BackgroundManialink, Text _BackgroundScript, Text _StylesManialink, Text _PreMainScript) {    
    declare SingleQuote0 = """ " """;
    declare SingleQuote1 = TL::SubString(SingleQuote0, 1, 1);
    
    // MarkerIds
    declare Integer[] MarkerIds;
    foreach (MarkerId => MarkeObj in G_Markers) {
        MarkerIds.add(MarkerId);
    }
    
    // MarkerFrameIds
    declare Text[Integer] MarkerFrameIds;
    foreach (MarkerId => MarkerObj in G_Markers) {
        MarkerFrameIds[MarkerId] = SingleQuote1 ^ MarkerObj.FrameId ^ SingleQuote1;
    }
    
    // Build Manialink
    declare FramesManialink = "";
    foreach (MarkerId => MarkerObj in G_Markers) {
        FramesManialink ^= """
        <frame class="CENTERED" id="{{{MarkerObj.FrameId}}}" z-index="1" >
        """ ^ MarkerObj.FrameManialink ^ """
        </frame>
        """;
    }
    
    // Build AbsoluteSetScripts
    declare AbsoluteSetScripts = "";
    foreach (MarkerId => MarkerObj in G_Markers) {
        AbsoluteSetScripts ^= """
        else if (MarkerId == {{{MarkerId}}}) {
            """ ^ MarkerObj.AbsoluteSetScript ^ """
        }""";
    }
    
    // Build AbsoluteToRelativeScripts
    declare AbsoluteToRelativeScripts = "";
    foreach (MarkerId => MarkerObj in G_Markers) {
        AbsoluteToRelativeScripts ^= """
        else if (MarkerId == {{{MarkerId}}}) {
            """ ^ MarkerObj.AbsoluteToRelativeScript ^ """
        }""";
    }
    
    // Build FinalInScripts
    declare FinalInScripts = "";
    foreach (MarkerId => MarkerObj in G_Markers) {
        FinalInScripts ^= """
        else if (MarkerId == {{{MarkerId}}}) {
            """ ^ MarkerObj.FinalInScript ^ """
        }""";
    }
    
    // Build FinalOutScripts
    declare FinalOutScripts = "";
    foreach (MarkerId => MarkerObj in G_Markers) {
        FinalOutScripts ^= """
        else if (MarkerId == {{{MarkerId}}}) {
            """ ^ MarkerObj.FinalOutScript ^ """
        }""";
    }
    
    return """
    <manialink version="3">
    
    <stylesheet>
        <style class="CENTERED" halign="center" valign="center" pos="0 0" />
        """ ^ _StylesManialink ^ """
    </stylesheet>
    <frame halign="center" valign="center" pos="0 0">
        <frame id="Minimap" halign="center" valign="center" pos="0 0" scale="0.4" size="100 100">
            <frame id="MinimapBackground" z-index="-1" halign="center" valign="center" pos="0 0" size="100 100">
            """ ^ _BackgroundManialink ^ """
            </frame>
        
            """ ^ FramesManialink ^ """    
        </frame>
    </frame>
    <script><!--
    #Include "MathLib" as ML
    #Include "TextLib" as TL
    
    #Const C_MarkerIds {{{MarkerIds}}}
    #Const C_MarkerFrameIds {{{MarkerFrameIds}}}
    
    """ ^ _PreMainScript ^ """
    
    Vec2 Rotate(Real _Angle, Vec2 _Vector) {
        declare Cosinus = ML::Cos(_Angle);
        declare Sinus = ML::Sin(_Angle);
        return <Cosinus, Sinus> * _Vector.X + <Sinus, - Cosinus> * _Vector.Y;
    }
    
    main () {
        declare Vec2[Integer] AbsolutePositions;
        declare Vec2[Integer] RelativePositions;
        declare Vec2[Integer] FinalPositions;
        
        declare Real[Integer] AbsoluteRotations;
        declare Real[Integer] RelativeRotations;
        declare Real[Integer] FinalRotations;
        
        declare Boolean[Integer] Hidden;
        
        declare Minimap <=> (Page.GetFirstChild("Minimap") as CMlFrame);
        declare MinimapBackground <=> (Minimap.GetFirstChild("MinimapBackground") as CMlFrame);
        
        declare Real MinimapZoom = 1.;
        declare Vec2 MinimapOffset = <0., 0.>;
        declare Real MinimapRotation = 0.;
        declare Vec2 MinimapPosition = <0., 0.>;
        declare Real MinimapSize = 1.;
        
        foreach (MarkerId in C_MarkerIds) {
            AbsolutePositions[MarkerId] = <0., 0.>;
            AbsoluteRotations[MarkerId] = 0.;
            RelativePositions[MarkerId] = <0., 0.>;
            RelativeRotations[MarkerId] = 0.;
            FinalPositions[MarkerId] = <0., 0.>;
            FinalRotations[MarkerId] = 0.;
            Hidden[MarkerId] = False;
        }
        
        while (True) {
            // Absolute set
            foreach (MarkerId in C_MarkerIds) {
                declare Vec2 AbsPos;
                declare Real AbsRot;
                declare Boolean IsHidden = False;
                
                if (False) {}
                """ ^ AbsoluteSetScripts ^ """
                
                AbsolutePositions[MarkerId] = AbsPos;
                AbsoluteRotations[MarkerId] = AbsRot;
                Hidden[MarkerId] = IsHidden;
            }
            
            // Focus set
            """ ^ _MinimapSetScript ^ """
            
            // Relative set
            foreach (MarkerId in C_MarkerIds) {
                declare Vec2 AbsPos = AbsolutePositions[MarkerId];
                declare Real AbsRot = AbsoluteRotations[MarkerId];
                declare Boolean IsHidden = Hidden[MarkerId];
                
                declare Vec2 RelPos;
                declare Real RelRot;
                
                if (False) {}
                """ ^ AbsoluteToRelativeScripts ^ """
                
                RelativePositions[MarkerId] = RelPos;
                RelativeRotations[MarkerId] = RelRot;
                Hidden[MarkerId] = IsHidden;
            }
            
            // Final prop
            foreach (MarkerId in C_MarkerIds) {
                declare Vec2 RelPos = RelativePositions[MarkerId];
                declare Real RelRot = RelativeRotations[MarkerId];
                declare Boolean IsHidden = Hidden[MarkerId];
                
                declare Vec2 FinPos;
                declare Real FinRot;
                
                if (ML::Abs(RelPos.X) > 1. * MinimapSize || ML::Abs(RelPos.Y) > 1. * MinimapSize) {
                    if (False) {}
                    """ ^ FinalOutScripts ^ """
                } else {
                    if (False) {}
                    """ ^ FinalInScripts ^ """
                }
                
                FinalPositions[MarkerId] = FinPos;
                FinalRotations[MarkerId] = FinRot;
                Hidden[MarkerId] = IsHidden;
            }
            
            // Drawing stuff
            Minimap.RelativePosition_V3 = MinimapPosition;
            Minimap.Size = <100., 100.>;
            
            MinimapBackground.Size = <100., 100.> * MinimapZoom;
            MinimapBackground.RelativeRotation = -MinimapRotation / ML::PI() * 180;
            MinimapBackground.RelativePosition_V3 = Rotate(MinimapRotation, MinimapOffset * 50. * MinimapZoom);
            
            """ ^ _BackgroundScript ^ """
            
            foreach (MarkerId => MarkerFrameId in C_MarkerFrameIds) {
                declare Frame <=> (Minimap.GetFirstChild(MarkerFrameId) as CMlFrame);
                Frame.RelativeRotation = FinalRotations[MarkerId] / ML::PI() * 180;
                Frame.RelativePosition_V3 = FinalPositions[MarkerId] * 50. * MinimapZoom;
                Frame.Visible = !Hidden[MarkerId];
            }
            
            yield;
        }
    }
    --></script>
    </manialink>
    """;
}