#Include 	"ColorLib" as CL
#Include	"Libs/Zrx/ModeLibs/FlagRush/UI/FlagRush_ColorPalette.Script.txt" as Colors
#Include	"Libs/Zrx/ModeLibs/Common/GameplayPhase.Script.txt" as GameplayPhase
#Include	"Libs/Zrx/ModeLibs/FlagRush/UI/UIShared.Script.txt" as UIShared

Text GetManialink() {
	return """
	<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
	<manialink version="3" name="FlagRush_ScoresHeader">
	<framemodel id="gradient">
		<quad pos="0 0" z-index="-1" size="1 1" bgcolor="c44" id="base" halign="center" valign="center"/>
		<quad pos="0 0" z-index="0" size="1 1" image="file://Media/Painter/Stencils/15-Stripes/_Stripe0Grad/Brush.tga" modulatecolor="b24" id="gradient-left" valign="center" halign="center"/>
		<quad pos="0 0" z-index="0" size="1 1" image="file://Media/Painter/Stencils/15-Stripes/_Stripe0Grad/Brush.tga" modulatecolor="b42" id="gradient-right" rot="180" valign="center" halign="center"/>
	</framemodel>

	<frame id="main" pos="0 82.5">
		<frame id="team0" z-index="1">
			<frame id="background" size="60 7.5" pos="-30" halign="center" valign="center">
				<frameinstance modelid="gradient" id="gradient" scale="60"/>
			</frame>
			<label pos="-32.5 -0.5" z-index="1" size="35 8" text="Team Blue" halign="center" textsize="4" id="name" textfont="GameFontRegular" valign="center2"/>

			<quad pos="-60 " z-index="1" size="10 8" valign="center" id="background-score" style="UICommon64_1" substyle="BgFrame1" colorize="00f" halign="center"/>
			<label pos="-60 -0.5" z-index="2" size="11.8 9" text="0" halign="center" valign="center2" textsize="5" id="score" textfont="GameFontBlack" />
		</frame>

		<frame id="team1" z-index="1">
			<frame id="background" size="60 7.5" pos="30" halign="center" valign="center">
				<frameinstance modelid="gradient" id="gradient" scale="60"/>
			</frame>
			<label pos="32.5 -0.5" z-index="1" size="35 8" text="Team Red" halign="center" textsize="4" id="name" textfont="GameFontRegular" valign="center2"/>

			<quad pos="60 " z-index="1" size="10 8" valign="center" id="background-score" style="UICommon64_1" substyle="BgFrame1" colorize="f00" halign="center"/>
			<label pos="60 -0.5" z-index="2" size="11.8 9" text="0" halign="center" valign="center2" textsize="5" id="score" textfont="GameFontBlack" />
		</frame>

		<frame id="timer" z-index="2">
			<quad pos="0 0" size="20 8" id="background" valign="center" z-index="-1" style="UICommon64_1" substyle="BgFrame1" halign="center" colorize="000"/>
			<label pos="0 0" z-index="1" size="25 8" text="00:00.00" id="timelimit" halign="center" valign="center" textsize="2" textfont="GameFontSemiBold"/>
			<quad pos="0 0" z-index="1" size="8 8" halign="center" valign="center" style="UIConstruction_Buttons" substyle="Validate" id="icon"/>
		</frame>

		<frame id="carrier" pos="0 -6.5">
			<frame id="background">
				<quad pos="-24 0" z-index="-1" size="6 6" valign="center" style="UICommon64_1" substyle="BgFrame1" colorize="0003" halign="center" rot="90"/>
				<quad pos="0 0" z-index="-1" size="50 6" opacity="1" colorize="000" halign="center" valign="center" style="UICommon64_1" substyle="BgFrame2"/>
				<quad pos="24 0" z-index="-1" size="6 6" valign="center" style="UICommon64_1" substyle="BgFrame1" colorize="0003" halign="center"/>
			</frame>

			<label pos="0 0.5" z-index="1" size="70 8" text="Playername" id="name" halign="center" valign="center" textsize="3" textfont="GameFontRegular" />
		</frame>
	</frame>

	<script><!--
	#Include "MathLib" as ML
	#Include "TextLib" as TL

	#Struct K_BackgroundGradient {
		CMlQuad Base;
		CMlQuad LeftGradient;
		CMlQuad RightGradient;
	}

	#Struct K_TeamArea {
		CMlFrame Frame;
		K_BackgroundGradient BackgroundGradient;
		CMlLabel TeamName;
		CMlQuad ScoreBackground;
		CMlLabel Score;
	}

	#Struct K_Timer {
		CMlFrame Frame;
		CMlLabel TimerLabel;
		CMlQuad Icon;
	}

	#Struct K_Carrier {
		CMlFrame Frame;
		CMlLabel CarrierLabel;
	}

	declare K_TeamArea[] TeamAreas;
	declare K_Timer Timer;
	declare K_Carrier Carrier;

	/**
	 * Assigns all needed MlControl references.
	 */
	Void AssignMlControlReferences() {
		TeamAreas = [];
		for (Team, 0, 1) {
			declare CMlFrame TeamAreaFrame = (Page.GetFirstChild("team" ^ Team) as CMlFrame);

			declare CMlFrame GradientFrame = (TeamAreaFrame.GetFirstChild("gradient") as CMlFrame);
			declare K_BackgroundGradient BackgroundGradient = K_BackgroundGradient {
				Base = (GradientFrame.GetFirstChild("base") as CMlQuad),
				LeftGradient = (GradientFrame.GetFirstChild("gradient-left") as CMlQuad),
				RightGradient = (GradientFrame.GetFirstChild("gradient-right") as CMlQuad)
			};

			TeamAreas.add(K_TeamArea {
				Frame = TeamAreaFrame,
				BackgroundGradient = BackgroundGradient,
				TeamName = (TeamAreaFrame.GetFirstChild("name") as CMlLabel),
				ScoreBackground = (TeamAreaFrame.GetFirstChild("background-score") as CMlQuad),
				Score = (TeamAreaFrame.GetFirstChild("score") as CMlLabel)
			});
		}

		declare CMlFrame TimerFrame = (Page.GetFirstChild("timer") as CMlFrame);
		Timer = K_Timer {
			Frame = TimerFrame,
			TimerLabel = (TimerFrame.GetFirstChild("timelimit") as CMlLabel),
			Icon = (TimerFrame.GetFirstChild("icon") as CMlQuad)
		};

		declare CMlFrame CarrierFrame = (Page.GetFirstChild("carrier") as CMlFrame);
		Carrier = K_Carrier {
			Frame = CarrierFrame,
			CarrierLabel = (CarrierFrame.GetFirstChild("name") as CMlLabel)
		};
	}

	/**
	 * Set the default values for all controls.
	 */
	Void InitMlControls() {
		TeamAreas[0].BackgroundGradient.Base.BgColor = {{{ Colors::C_BlueBase }}};
		TeamAreas[0].BackgroundGradient.LeftGradient.ModulateColor = {{{ Colors::C_BlueDark }}};
		TeamAreas[0].BackgroundGradient.RightGradient.ModulateColor = {{{ Colors::C_BlueLight }}};
		TeamAreas[0].ScoreBackground.ModulateColor = {{{ Colors::C_BlueBase }}};

		TeamAreas[1].BackgroundGradient.Base.BgColor = {{{ Colors::C_BlueBase }}};
		TeamAreas[1].BackgroundGradient.LeftGradient.ModulateColor = {{{ Colors::C_RedLight }}};
		TeamAreas[1].BackgroundGradient.RightGradient.ModulateColor = {{{ Colors::C_RedDark }}};
		TeamAreas[1].ScoreBackground.ModulateColor = {{{ Colors::C_RedBase }}};
	}

	/**
	 * Updates the round scores (flags scored) for the teams.
	 */
	***UpdateTeamScores***
	***
	for (Team, 0, 1) {
		declare netread Integer Net_FlagRush_TeamRoundScore for Teams[Team];
		TeamAreas[Team].Score.Value = TL::ToText(Net_FlagRush_TeamRoundScore);
	}
	***

	/**
	 * Updates the center timer.
	 */
	***UpdateTimer***
	***
	declare Integer RoundTimeLeft = Net_FlagRush_EndTime - GameTime;
	declare Boolean IsTimeLeft = RoundTimeLeft > 0;
	if(IsTimeLeft) {
		Timer.Icon.Hide();
		Timer.TimerLabel.Show();
		Timer.TimerLabel.Value = FormatTime(RoundTimeLeft);

		if (Net_GameplayPhase == {{{ GameplayPhase::C_Warmup }}}) {
			Timer.TimerLabel.TextColor = {{{ Colors::C_Warning }}};
		} else if (IsTimeLeft && RoundTimeLeft / 1000 < 30) {
			Timer.TimerLabel.TextColor = {{{ Colors::C_Error }}};
		} else {
			Timer.TimerLabel.TextColor = {{{ Colors::C_NeutralLight }}};
		}
	} else if (Net_GameplayPhase == {{{ GameplayPhase::C_Overtime }}}) {
		Timer.Icon.Hide();
		Timer.TimerLabel.Show();
		Timer.TimerLabel.Value = "Overtime";
		Timer.TimerLabel.TextColor = {{{ Colors::C_Warning }}};
	} else {
		Timer.Icon.Show();
		Timer.TimerLabel.Hide();
		if (FlagCarrierPlayer != Null && Teams.existskey(FlagCarrierPlayer.CurrentClan - 1)) Timer.Icon.Colorize = GetTeamPrimaryColor(Teams[FlagCarrierPlayer.CurrentClan - 1]);
		else Timer.Icon.Colorize = {{{ Colors::C_NeutralLight }}};
	}
	***

	/**
	 * Updates the flag carrier display.
	 */
	***UpdateCarrier***
	***
	if (Net_GameplayPhase == {{{ GameplayPhase::C_Warmup }}}) {
		Carrier.CarrierLabel.Value = "WarmUp";
		Carrier.CarrierLabel.TextColor = {{{ Colors::C_Warning }}};
	}
	else if (FlagCarrierPlayer != Null) {
		Carrier.CarrierLabel.Value = FlagCarrierPlayer.User.Name;
		if (Teams.existskey(FlagCarrierPlayer.CurrentClan - 1)) {
			Carrier.CarrierLabel.TextColor = GetTeamPrimaryColor(Teams[FlagCarrierPlayer.CurrentClan - 1]);
		} else {
			Carrier.CarrierLabel.TextColor = {{{ Colors::C_NeutralLight }}};
		}
	} else {
		Carrier.CarrierLabel.Value = Net_FlagRush_FlagCarrierName;
		Carrier.CarrierLabel.TextColor = {{{ Colors::C_NeutralLight }}};
	}
	***

	/**
	 * Formats given millis to a Text mm:ss.
	 */
	Text FormatTime(Integer Millis) {
		declare RoundMinutesLeft = Millis / 60000;
		declare RoundSecondsLeft = (Millis - RoundMinutesLeft * 60000) / 1000;	// Just the portion
		declare Text PotentialLeadingZero;
		if (ML::Abs(RoundSecondsLeft) < 10) PotentialLeadingZero = "0";

		declare Text Time = ML::Abs(RoundMinutesLeft)
						^ ":" ^ PotentialLeadingZero
						^ ML::Abs(RoundSecondsLeft);
		if (Millis < 0) Time = "-" ^ Time;
		return Time;
	}

	{{{ UIShared::GetTeamColorNetreadFunctions() }}}
	{{{ UIShared::GetUtilFunctions() }}}

	main() {

		AssignMlControlReferences();
		InitMlControls();

		declare netread Text Net_FlagRush_FlagCarrierLogin for Teams[0];
		declare netread Text Net_FlagRush_FlagCarrierName for Teams[0];
		declare netread Integer Net_FlagRush_EndTime for Teams[0];
		declare netread Integer Net_GameplayPhase for Teams[0];

		declare CSmPlayer FlagCarrierPlayer;

		while (True) {
			yield;

			FlagCarrierPlayer <=> GetPlayer(Net_FlagRush_FlagCarrierLogin);

			+++UpdateTeamScores+++
			+++UpdateTimer+++
			+++UpdateCarrier+++
		}
	}
	--></script>
	</manialink>
	""";
}