// #RequireContext CSmMode

#Include	"Libs/Zrx/ModeLibs/FlagRush/UI/UIShared.Script.txt" as UIShared
#Include	"Libs/Zrx/ModeLibs/FlagRush/FlagRush_Teams.Script.txt" as FlagRush_Teams
#Include	"Libs/Zrx/ModeLibs/Common/GameplayPhase.Script.txt" as GameplayPhase

Text GetManialink() {
	return """
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
	<manialink version="3" name="FlagRush_ScoresHeader">
	<frame halign="center" valign="top" pos="0 83" scale="1">
		<frame id="mapscores" pos="0 2.5">
			<quad pos="0 0" z-index="-1" size="60 8" bgcolor="FFF" valign="center" style="UICommon64_1" substyle="BgFrameTilted1" colorize="000" halign="center" scale="0.5"/>
			<label pos="0 0.25" z-index="0" size="30 10" text="Round Wins" halign="center" valign="center" textfont="GameFontRegular" textsize="1"/>
			<quad pos="-30 0" z-index="0" size="60 8" id="team1-mapscore-background" valign="center" halign="center" style="UICommon64_1" substyle="BgFrameTilted1" colorize="004" scale="0.5"/>
			<quad pos="30 0" z-index="0" size="60 8" id="team2-mapscore-background" valign="center" halign="center" style="UICommon64_1" substyle="BgFrameTilted1" colorize="400" scale="0.5"/>
			<label id="team1-mapscore" pos="-30 0" z-index="2" size="30 5" text=" " valign="center2" halign="center" textsize="0.5"/>
			<label id="team2-mapscore" pos="30 0" z-index="2" size="30 5" text=" " valign="center2" halign="center" textsize="0.5"/>
		</frame>
		<frame id="main">
			<frame id="team-stats">
				<quad pos="-50 0" z-index="0" size="12 8" valign="top" halign="right" id="team1-score-background" style="UICommon64_1" substyle="BgFrame1" colorize="00f"/>
				<quad pos="50 0" z-index="0" size="12 8" halign="left" id="team2-score-background" style="UICommon64_1" substyle="BgFrame1" colorize="f00"/>
				<quad pos="-33 -10" z-index="-3" size="8 8" valign="center" id="team1-matchscore-background" style="UICommon64_1" substyle="BgFrame1" colorize="00f"  halign="center" rot="90"/>
				<quad pos="33 -10" z-index="-3" size="8 8" id="team2-matchscore-background" style="UICommon64_1" substyle="BgFrame1" colorize="f00" halign="center" valign="center"/>
				<label pos="-33 -11" z-index="0" size="8 8" text="0" halign="center" valign="center2" textfont="GameFontExtraBold" textsize="4" id="team1-matchscore"/>
				<label pos="33 -11" z-index="0" size="8 8" text="0" halign="center" valign="center2" textfont="GameFontExtraBold" textsize="4" id="team2-matchscore"/>
				<label pos="0 -10" z-index="-1" size="60 8" text="Playername" id="flag-carrier" halign="center" valign="center" textsize="3" textfont="GameFontRegular" />
				<quad pos="0 -10" z-index="-1" size="60 8" opacity="1" colorize="000" halign="center" valign="center" style="UICommon64_1" substyle="BgFrame2"/>
				<label pos="-30 -4.5" z-index="1" size="38 8" text="Team Blue" halign="center" textsize="4" id="team1-name" textfont="GameFontRegular" valign="center2"/>
				<label pos="30 -4.5" z-index="1" size="38 8" text="Team Red" valign="center2" halign="center" textsize="4" id="team2-name" textfont="GameFontRegular"/>

				<label pos="-56 -4.5" z-index="2" size="12 8" text="0" halign="center" valign="center2" textsize="5" id="team1-roundscore" textfont="GameFontBlack" />
				<label pos="56 -4.5" z-index="2" size="12 10" text="0" halign="center" valign="center2" textsize="5" id="team2-roundscore" textfont="GameFontBlack"/>
				<quad id="team2-score-background2" pos="0 0" z-index="0" size="60 8" opacity="1" halign="left" colorize="400" style="UICommon64_1" substyle="BgFrame1"/>
				<quad id="team1-score-background2" pos="0 0" z-index="0" size="60 8" opacity="1" halign="right" colorize="004" style="UICommon64_1" substyle="BgFrame1"/>
			</frame>
			<frame id="center" pos="0 -4" z-index="1">
				<quad pos="0 0" size="20 8" id="background" valign="center" z-index="-1" style="UICommon64_1" substyle="BgFrame1" halign="center" colorize="000"/>
				<label pos="0 0" z-index="1" size="25 8" text="00:00.00" id="timelimit" halign="center" valign="center" textsize="2" textfont="GameFontSemiBold"/>
				<quad pos="0 0" z-index="1" size="8 8" opacity="1" halign="center" valign="center" style="UIConstruction_Buttons" substyle="Validate" id="center-flag"/>
			</frame>
		</frame>
	</frame>
	<script><!--
		#Include "MathLib" as ML
		#Include "TextLib" as TL
		#Include "ColorLib" as CL

		#Const C_FilledGlyph ""
		#Const C_EmptyGlyph ""
		#Const C_UpdateInterval 100

		{{{UIShared::GetTeamColorNetreadFunctions()}}}

		main() {
			/* MlControl references */
			// Mapscore, Round Wins
			declare CMlFrame FrameMapScores = (Page.GetFirstChild("mapscores") as CMlFrame);
			declare CMlQuad QuadTeam1MapScoreBackground = (Page.GetFirstChild("team1-mapscore-background") as CMlQuad);
			declare CMlQuad QuadTeam2MapScoreBackground = (Page.GetFirstChild("team2-mapscore-background") as CMlQuad);
			declare CMlLabel LabelTeam1MapScore = (Page.GetFirstChild("team1-mapscore") as CMlLabel);
			declare CMlLabel LabelTeam2MapScore = (Page.GetFirstChild("team2-mapscore") as CMlLabel);

			// Main Stats
			declare CMlFrame FrameMain = (Page.GetFirstChild("main") as CMlFrame);
			declare CMlLabel LabelTeam1Name = (Page.GetFirstChild("team1-name") as CMlLabel);
			declare CMlLabel LabelTeam2Name = (Page.GetFirstChild("team2-name") as CMlLabel);
			declare CMlLabel LabelTeam1RoundScore = (Page.GetFirstChild("team1-roundscore") as CMlLabel);
			declare CMlLabel LabelTeam2RoundScore = (Page.GetFirstChild("team2-roundscore") as CMlLabel);
			declare CMlQuad QuadTeam1ScoreBackground = (Page.GetFirstChild("team1-score-background") as CMlQuad);
			declare CMlQuad QuadTeam2ScoreBackground = (Page.GetFirstChild("team2-score-background") as CMlQuad);
			declare CMlQuad QuadTeam1ScoreBackground2 = (Page.GetFirstChild("team1-score-background2") as CMlQuad);
			declare CMlQuad QuadTeam2ScoreBackground2 = (Page.GetFirstChild("team2-score-background2") as CMlQuad);
			declare CMlQuad QuadTeam1ScoreBackground3 = (Page.GetFirstChild("team1-matchscore-background") as CMlQuad);
			declare CMlQuad QuadTeam2ScoreBackground3 = (Page.GetFirstChild("team2-matchscore-background") as CMlQuad);
			declare CMlLabel LabelTeam1MatchScore = (Page.GetFirstChild("team1-matchscore") as CMlLabel);
			declare CMlLabel LabelTeam2MatchScore = (Page.GetFirstChild("team2-matchscore") as CMlLabel);

			// Center (Timer/Flag)
			declare CMlFrame FrameCenter = (Page.GetFirstChild("center") as CMlFrame);
			declare CMlLabel LabelTimeLimit = (FrameCenter.GetFirstChild("timelimit") as CMlLabel);
			declare CMlQuad QuadCenterFlag = (Page.GetFirstChild("center-flag") as CMlQuad);

			// Flag Carrier
			declare CMlLabel LabelFlagCarrier = (Page.GetFirstChild("flag-carrier") as CMlLabel);

			/* Netread variables */
			declare netread Integer Net_FlagRush_NbMapsToWinMatch for Teams[0];
			declare netread Integer Net_FlagRush_NbRoundsToWinMap for Teams[0];

			declare netread Integer Net_FlagRush_FlagCarrierClan for Teams[0];
			declare netread Text Net_FlagRush_FlagCarrierName for Teams[0];
			declare netread Integer Net_FlagRush_EndTime for Teams[0];
			declare netread Integer Net_GameplayPhase for Teams[0];

			declare Integer LastUpdate = -1;

			/* Main Loop */
			while(True) {
				yield;

				if(Now - LastUpdate < C_UpdateInterval) continue;
				LastUpdate = Now;

				/* Team names and colors */
				LabelTeam1Name.Value = Teams[0].Name;
				LabelTeam2Name.Value = Teams[1].Name;

				declare Vec3 ColorTeam1 = GetTeamPrimaryColor(Teams[0]);
				declare Vec3 ColorTeam2 = GetTeamPrimaryColor(Teams[1]);
				declare Vec3 ColorTeam1Dark = CL::RgbToHsv(ColorTeam1);
				ColorTeam1Dark.Z /= 3;
				ColorTeam1Dark = CL::HsvToRgb(ColorTeam1Dark);
				declare Vec3 ColorTeam2Dark = CL::RgbToHsv(ColorTeam2);
				ColorTeam2Dark.Z /= 3;
				ColorTeam2Dark = CL::HsvToRgb(ColorTeam2Dark);

				QuadTeam1ScoreBackground.Colorize = ColorTeam1;
				QuadTeam2ScoreBackground.Colorize = ColorTeam2;
				QuadTeam1ScoreBackground3.Colorize = ColorTeam1;
				QuadTeam2ScoreBackground3.Colorize = ColorTeam2;

				QuadTeam1ScoreBackground2.Colorize = ColorTeam1Dark;
				QuadTeam2ScoreBackground2.Colorize = ColorTeam2Dark;
				QuadTeam1MapScoreBackground.Colorize = ColorTeam1Dark;
				QuadTeam2MapScoreBackground.Colorize = ColorTeam2Dark;

				/* General */
				declare CTeam FlagCarrierTeam = Null;
				if (Net_FlagRush_FlagCarrierClan > 0) FlagCarrierTeam <=> Teams[Net_FlagRush_FlagCarrierClan - 1];

				/* Timer */
				declare Integer RoundTimeLeft = Net_FlagRush_EndTime - GameTime;
				declare Boolean IsTimeLeft = RoundTimeLeft > 0;
				LabelTimeLimit.Visible = IsTimeLeft;

				declare Text RoundTimeLeftText = "00:00";
				if(IsTimeLeft) {
					declare RoundMinutesLeft = RoundTimeLeft / 60000;
					declare RoundSecondsLeft = (RoundTimeLeft - RoundMinutesLeft * 60000) / 1000;	// Just the portion

					declare Text PotentialLeadingZero;
					if (ML::Abs(RoundSecondsLeft) < 10) PotentialLeadingZero = "0";
					RoundTimeLeftText = ML::Abs(RoundMinutesLeft)
									^ ":" ^ PotentialLeadingZero
									^ ML::Abs(RoundSecondsLeft);
				}

				/* Center Flag or TimeLimit */
				LabelTimeLimit.TextPrefix = "$fff";
				LabelTimeLimit.Value = RoundTimeLeftText;
				LabelTimeLimit.Visible = IsTimeLeft;
				QuadCenterFlag.Visible = !IsTimeLeft;
				QuadCenterFlag.Colorize = GetTeamPrimaryColor(FlagCarrierTeam);

				/* Flag Carrier */
				LabelFlagCarrier.TextPrefix = "$" ^ CL::RgbToHex3(GetTeamPrimaryColor(FlagCarrierTeam));
				LabelFlagCarrier.Value = Net_FlagRush_FlagCarrierName;

				/* Override in special cases */
				switch(Net_GameplayPhase) {
					case {{{GameplayPhase::C_Warmup}}}: {
						LabelTimeLimit.TextPrefix = "$f90";
						LabelFlagCarrier.TextPrefix = "$f90";
						LabelFlagCarrier.Value = "WarmUp";
						QuadCenterFlag.Colorize = {{{FlagRush_Teams::C_DefaultNeutralColor}}};
					}
					case {{{GameplayPhase::C_Overtime}}}: {
						LabelTimeLimit.TextPrefix = "$f90";
						LabelTimeLimit.Value = "Overtime";
						LabelTimeLimit.Visible = True;
						QuadCenterFlag.Visible = False;
					}
					case {{{GameplayPhase::C_Round}}}: {
						/* Low Time Color */
						if (IsTimeLeft && RoundTimeLeft / 1000 < 30) {
							LabelTimeLimit.TextPrefix = "$f00";
						}
					}
				}

				/* Round score */
				for (Clan, 1, 2) {
					declare netread Integer Net_FlagRush_TeamRoundScore for Teams[Clan-1];
					declare netread Integer Net_FlagRush_TeamMatchScore for Teams[Clan-1];

					if (Clan == 1) {
						LabelTeam1RoundScore.Value = TL::ToText(Net_FlagRush_TeamRoundScore);
						LabelTeam1MatchScore.Value = TL::ToText(Net_FlagRush_TeamMatchScore);
					}
					if (Clan == 2) {
						LabelTeam2RoundScore.Value = TL::ToText(Net_FlagRush_TeamRoundScore);
						LabelTeam2MatchScore.Value = TL::ToText(Net_FlagRush_TeamMatchScore);
					}
				}

				/* Map score */
				declare Boolean ShowRoundWins = Net_FlagRush_NbRoundsToWinMap >= 2;
				FrameMapScores.Visible = ShowRoundWins;
				FrameMain.RelativePosition_V3.Y = 3.5;
				if(ShowRoundWins) {
					FrameMain.RelativePosition_V3.Y = 0.;

					for (Clan, 1, 2) {
						declare netread Integer Net_FlagRush_TeamMapScore for Teams[Clan-1];
						declare Text Output = "";

						for(I, 0, Net_FlagRush_TeamMapScore - 1) {
							Output ^= C_FilledGlyph ^ " ";
						}
						for(I, 0, Net_FlagRush_NbRoundsToWinMap - Net_FlagRush_TeamMapScore - 1) {
							Output ^= C_EmptyGlyph ^ " ";
						}
						if (Clan == 1) LabelTeam1MapScore.Value = Output;
						if (Clan == 2) LabelTeam2MapScore.Value = Output;
					}
				}
			}
		}
	--></script>
</manialink>
""";
}