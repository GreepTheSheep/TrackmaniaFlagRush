// #RequireContext CSmMlScriptIngame
#Include	"Libs/Zrx/ModeLibs/FlagRush/UI/UIShared.Script.txt" as UIShared

#Const		C_PlayerCardBackgrounColorMultiplier		0.75

Text GetManialink() {
	declare Integer PlayersPerPage = 6;

	// Create Text with XML Frame instances to insert in manialink text
	declare Text PlayerCardFrameInstancesTeam1Xml;
	declare Text PlayerCardFrameInstancesTeam2Xml;
	for(I, 1, PlayersPerPage) {
		PlayerCardFrameInstancesTeam1Xml ^= """
		<frameinstance modelid="player-card-left" pos="0 {{{-(5+(I-1)*6.5)}}}" id="player-card-team1-{{{I}}}" hidden="1" />
		""";
		PlayerCardFrameInstancesTeam2Xml ^= """
		<frameinstance modelid="player-card-right" pos="0 {{{-(5+(I-1)*6.5)}}}" id="player-card-team2-{{{I}}}" hidden="1" />
		""";
	}

	// Create Text with Maniascript arrays to insert in manialink script text
	declare Text PlayerCardFramesTeam1ScriptList = "[";
	declare Text PlayerCardFramesTeam2ScriptList = "[";
	for(I, 1, PlayersPerPage) {
		PlayerCardFramesTeam1ScriptList ^= """
		Page.GetFirstChild("player-card-team1-{{{I}}}") as CMlFrame""";

		PlayerCardFramesTeam2ScriptList ^= """
		Page.GetFirstChild("player-card-team2-{{{I}}}") as CMlFrame""";

		if(I < PlayersPerPage) {
			PlayerCardFramesTeam1ScriptList ^= ",";
			PlayerCardFramesTeam2ScriptList ^= ",";
		}
		else {
			PlayerCardFramesTeam1ScriptList ^= "]";
			PlayerCardFramesTeam2ScriptList ^= "]";
		}
	}

	return """
	<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
	<manialink version="3">
	<stylesheet>
	<style class="text" textsize="2" textfont="GameFontRegular" valign="center2" />
	<style class="header" textsize="2" textfont="GameFontSemiBold" valign="center2" />
	</stylesheet>
	<framemodel id="player-card-left">
	<quad pos="0 0" z-index="-1" size="64 6" opacity="0.5" id="background" valign="center" style="UICommon64_1" substyle="BgFrame2" colorize="00d" halign="left"/>
	<quad pos="0 0" z-index="1" size="6 6" bgcolor="FFF" valign="center" id="avatar" halign="left"/>
	<label pos="10 0" z-index="1" size="15 5" text="Player Name" halign="left" textsize="1" id="name" textfont="GameFontRegular" valign="center2" />
	<quad pos="8 0" z-index="2" size="3 3" halign="center" valign="center" id="info-icon" style="Icons64x64_2" substyle="Disconnected" hidden="0" />
	</framemodel>
	<framemodel id="player-card-right">
	<quad pos="0 0" z-index="-1" size="64 6" opacity="0.5" id="background" valign="center" style="UICommon64_1" substyle="BgFrame2" colorize="900" halign="left"/>
	<quad pos="0 0" z-index="1" size="6 6" bgcolor="FFF" valign="center" id="avatar" halign="left"/>
	<label pos="10 0" z-index="1" size="15 5" text="Player Name" halign="left" textsize="1" id="name" textfont="GameFontRegular" valign="center2" />
	<quad pos="8 0" z-index="2" size="3 3" halign="center" valign="center" id="info-icon" style="Icons64x64_2" substyle="Disconnected" hidden="0" />
	</framemodel>
	<frame z-index="5000" id="main-menu" hidden="1">
	<quad id="background" z-index="-2" pos="0 0" size="70 80" opacity="1" alphamask="file://Media/Manialinks/Nadeo/TMNext/Menus/PageMatchmakingMain/Matchmaking_lobby_mode_mask.dds" image="file://Media/Manialinks/Nadeo/TMNext/Menus/Background_marketing.dds" halign="center"  modulatecolor="115EFFFF" valign="center"/>
	<quad pos="0 24" z-index="0" size="50 0.33" bgcolor="FFF" halign="center" valign="top"/>
	<label pos="0 32" z-index="0" size="93.6 7.89" text="FlagRush" textfont="GameFontRegular" textsize="6" halign="center" valign="center"/>
	<frame pos="0 15" class="uiContainer uiButton">
	<quad size="50 8" style="Bgs1InRace" class="" substyle="BgColorContour" halign="center" valign="center2" />
	<label size="49 7" text="Resume" class="uiButtonElement" halign="center" valign="center2" focusareacolor1="0000" focusareacolor2="3ada" scriptevents="1" translate="0" textsize="1.2" data-action="Resume"/>
	</frame>
	<frame pos="0 5" class="uiContainer uiButton">
	<quad size="50 8" style="Bgs1InRace" class="" substyle="BgColorContour" halign="center" valign="center2" />
	<label size="49 7" text="Spectate" class="uiButtonElement" halign="center" valign="center2" focusareacolor1="0000" focusareacolor2="3ada" scriptevents="1" translate="0" textsize="1.2" data-action="Spectate" />
	</frame>
	<frame pos="0 -5" class="uiContainer uiButton">
	<quad size="50 8" style="Bgs1InRace" class="" substyle="BgColorContour" halign="center" valign="center2" />
	<label size="49 7" text="Teams..." class="uiButtonElement" halign="center" valign="center2" focusareacolor1="0000" focusareacolor2="3ada" scriptevents="1" translate="0" textsize="1.2" data-action="Teams"/>
	</frame>
	<frame pos="0 -15" class="uiContainer uiButton">
	<quad size="50 8" style="Bgs1InRace" class="" substyle="BgColorContour" halign="center" valign="center2" />
	<label size="49 7" text="Mode settings..." class="uiButtonElement" halign="center" valign="center2" focusareacolor1="0000" focusareacolor2="3ada" scriptevents="1" translate="0" textsize="1.2" data-action="Setup" />
	</frame>
	<frame pos="0 -25" class="uiContainer uiButton">
	<quad size="50 8" style="Bgs1InRace" class="" substyle="BgColorContour" halign="center" valign="center2" />
	<label size="49 7" text="Quit" class="uiButtonElement" halign="center" valign="center2" focusareacolor1="0000" focusareacolor2="3ada" scriptevents="1" translate="0" textsize="1.2" data-action="Quit" />
	</frame>
	</frame>
	<frame z-index="5000" hidden="0" id="teams-menu">
	<quad id="background" z-index="-2" pos="0 0" size="160 90" opacity="1" alphamask="file://Media/Manialinks/Nadeo/TMNext/Menus/PageMatchmakingMain/Matchmaking_lobby_mode_mask.dds" image="file://Media/Manialinks/Nadeo/TMNext/Menus/Background_marketing.dds" modulatecolor="115EFFFF" valign="center" halign="center"/>
	<label class="header" pos="0 40" size="120 8" text="$iTeams" textsize="6" textfont="GameFontExtraBold" halign="center" valign="center"/>
	<frame pos="-70 20">
	{{{PlayerCardFrameInstancesTeam1Xml}}}
	<frame pos="30 10" class="uiContainer uiButton" scale="0.8" >
	<quad size="30 8" style="Bgs1InRace" class="" substyle="BgColorContour" halign="center" valign="center2" />
	<label size="29 7" text="Join Team" class="uiButtonElement" halign="center" valign="center2" focusareacolor1="0000" focusareacolor2="3afa" scriptevents="1" translate="0" textsize="1.2" data-action="JoinTeam1" />
	</frame>
	</frame>
	<frame pos="5 20">
	{{{PlayerCardFrameInstancesTeam2Xml}}}
	<frame pos="30 10" class="uiContainer uiButton" scale="0.8">
	<quad size="30 8" style="Bgs1InRace" class="" substyle="BgColorContour" halign="center" valign="center2" />
	<label size="29 7" text="Join Team" class="uiButtonElement" halign="center" valign="center2" focusareacolor1="0000" focusareacolor2="3afa" scriptevents="1" translate="0" textsize="1.2" data-action="JoinTeam2" />
	</frame>
	</frame>

	<frame id="page-controls" pos="0 -22" z-index="2">
	<quad pos="0 0" z-index="1" size="3 3" halign="right" valign="center" style="UICommon64_2" substyle="ArrowUpSlim_light" scriptevents="1" id="page-previous"/>
	<quad pos="0 0" z-index="1" size="3 3" halign="left" style="UICommon64_2" substyle="ArrowDownSlim_light" scriptevents="1" id="page-next" valign="center"/>
	<quad pos="0 1.5" z-index="0" size="280 6" bgcolor="000" opacity="0.4" halign="center" valign="top" style="UICommon64_1" substyle="BgFrame1" colorize="000" scale="0.5"/>
	</frame>
	<frame pos="-16 -38" class="uiContainer uiButton">
	<quad size="30 8" style="Bgs1InRace" class="" substyle="BgColorContour" halign="center" valign="center2" />
	<label size="29 7" text="AutoBalance" class="uiButtonElement" halign="center" valign="center2" focusareacolor1="0000" focusareacolor2="3ada" scriptevents="1" translate="0" textsize="1.2" data-action="Balance" />
	</frame>
	<frame pos="16 -38" class="uiContainer uiButton">
	<quad size="30 8" style="Bgs1InRace" class="" substyle="BgColorContour" halign="center" valign="center2" />
	<label size="29 7" text="Back" class="uiButtonElement" halign="center" valign="center2" focusareacolor1="0000" focusareacolor2="3ada" scriptevents="1" translate="0" textsize="1.2" data-action="ShowMenu" />
	</frame>
	</frame>
	<script><!--
	#Include "TextLib" as TL
	#Include "MathLib" as ML
	#Include "ColorLib" as CL
	// ------------------------------ //
	// Global Variables
	// ------------------------------ //

	// Body
	declare CMlFrame[] PlayerCardFramesTeam1;
	declare CMlFrame[] PlayerCardFramesTeam2;

	// Page controls
	declare CMlFrame FramePageControls;
	declare CMlQuad QuadPagePrevious;
	declare CMlQuad QuadPageNext;

	/* Scores table control Variables */
	declare Integer CurrentPageIndex;

	{{{UIShared::GetTeamColorNetreadFunctions()}}}

	/**
	* Gets the player object for a given login.
	* Returns Null if the player was not found.
	*/
	CSmPlayer GetPlayer(Text Login) {
		foreach (Player in Players) {
			if (Player.User.Login == Login) {
				return Player;
			}
		}
		return Null;
	}

	/**
	* Checks if a player with given login is connected.
	*/
	Boolean IsConnected(Text Login) {
		foreach (Player in Players) {
			if (Player.User.Login == Login) return True;
		}
		return False;
	}

	/**
	* Determines the amount of pages, clamps the current page index and shows and hides the page controls accordingly.
	*/
	Void UpdatePageState(CSmScore[][Integer] ScoresToDisplay) {
		// Determine the amount of pages and clamp the current page
		declare Integer NbPages	= (ML::Max(ScoresToDisplay[1].count, ScoresToDisplay[2].count) / ({{{PlayersPerPage}}} + 1)) + 1;
		CurrentPageIndex = ML::Clamp(CurrentPageIndex, 0, NbPages - 1);

		// Show page controls if there is more than one page
		FramePageControls.Visible = NbPages >= 2;
		QuadPagePrevious.Visible = CurrentPageIndex >= 1;
		QuadPageNext.Visible = CurrentPageIndex < NbPages - 1;
	}

	/**
	* Updates the content of a given playercard with a given Score.
	* Does nothing if the given card is Null.
	* Hides the card if the given score is Null.
	*/
	Void UpdatePlayerCardContet(CMlFrame PlayerCard, CSmScore Score) {
		if(PlayerCard == Null) return;
		/* Visibility */
		if(Score == Null) {
			PlayerCard.Visible = False;
			return;
		}
		PlayerCard.Visible = True;

		/* References for MlControls in PlayerCard Frame */
		declare CMlLabel LabelPlayerName = (PlayerCard.GetFirstChild("name") as CMlLabel);
		declare CMlQuad QuadPlayerAvatar = (PlayerCard.GetFirstChild("avatar") as CMlQuad);
		declare CMlQuad QuadPlayerBackground = (PlayerCard.GetFirstChild("background") as CMlQuad);
		declare CMlQuad QuadInfo = (PlayerCard.GetFirstChild("info-icon") as CMlQuad);

		/* General */
		declare CTeam Team = Null;
		if (Score.TeamNum > 0) Team <=> Teams[Score.TeamNum - 1];
		declare Vec3 TeamColor = GetTeamPrimaryColor(Team);

		/* Status / Info icon */
		declare Boolean IsConnected = IsConnected(Score.User.Login);
		declare CSmPlayer Player <=> GetPlayer(Score.User.Login);
		QuadInfo.Visible = !IsConnected || Player.RequestsSpectate;
		if(!IsConnected) {
			QuadInfo.Style = "Icons64x64_2";
			QuadInfo.Substyle = "Disconnected";
		} else if (Player.RequestsSpectate) {
			QuadInfo.Style = "UICommon64_1";
			QuadInfo.Substyle = "Camera_light";
		}

		/* Background */
		declare Vec3 BackgroundColor = TeamColor;
		BackgroundColor.X *= {{{C_PlayerCardBackgrounColorMultiplier}}};
		BackgroundColor.Y *= {{{C_PlayerCardBackgrounColorMultiplier}}};
		BackgroundColor.Z *= {{{C_PlayerCardBackgrounColorMultiplier}}};
		QuadPlayerBackground.Colorize = BackgroundColor;

		/* Avatar / Flag */
		QuadPlayerAvatar.BgColor = TeamColor;
		QuadPlayerAvatar.ImageUrl = Score.User.CountryFlagUrl;
		LabelPlayerName.Value = Score.User.Name;
	}

	/**
	* Gets the player card for a given clan and index.
	* Returns null if the clan or index is out of bounds.
	*/
	CMlFrame GetPlayerCardByClanAndIndex(Integer Clan, Integer Index) {
		if(Index >= {{{PlayersPerPage}}} || Index < 0) return Null;

		if(Clan == 1) return PlayerCardFramesTeam1[Index];
		else if(Clan == 2) return PlayerCardFramesTeam2[Index];
		return Null;
	}

	/**
	* Filters out scores that should not be displayed:
	*     - Do not display disconnected players or spectators with less than one point.
	*     - Do not display disconnected players or spectators in warmup, regardless of points.
	* Scores are returned in an array with the clan number as key.
	*/
	CSmScore[][Integer] FilterScoresToDisplay() {
		declare CSmScore[][Integer] ScoresToDisplay = [0 => [], 1 => [], 2 => []];
		foreach (Score in Scores) {
			declare Boolean PlayerIsConnected = IsConnected(Score.User.Login);
			declare Boolean PlayerIsSpectating = PlayerIsConnected && GetPlayer(Score.User.Login).RequestsSpectate;

			// In warmup, do not show disonnected or spectating players
			// Outside of warmup, do not show disconnected or spectating players with no points
			if(!PlayerIsConnected || PlayerIsSpectating) continue;
			ScoresToDisplay[Score.TeamNum].add(Score);
		}
		return ScoresToDisplay;
	}

	/**
	* Updates the player cards for the current page with the given scores (sorted by team).
	*/
	Void UpdatePagePlayerCards(CSmScore[][Integer] ScoresToDisplay) {
		for(Clan, 1, 2) {
			for(PlayerCardIndex, 0, {{{PlayersPerPage - 1}}}) {
				declare CMlFrame PlayerCard <=> GetPlayerCardByClanAndIndex(Clan, PlayerCardIndex);
				declare Integer PlayerIndex = CurrentPageIndex * {{{PlayersPerPage}}} + PlayerCardIndex;	// Offset by page
				declare CSmScore Score;
				if(PlayerIndex < ScoresToDisplay[Clan].count) Score <=> ScoresToDisplay[Clan][PlayerIndex];
				UpdatePlayerCardContet(PlayerCard, Score);
			}
		}
	}

	/**
	* Updates the content of the current scorestable page
	*/
	Void UpdateCurrentPage() {
		declare CSmScore[][Integer] ScoresToDisplay = FilterScoresToDisplay();
		UpdatePageState(ScoresToDisplay);
		UpdatePagePlayerCards(ScoresToDisplay);
	}


	Void ShowMenu(Text MenuName) {
		foreach (Elem in Page.MainFrame.Controls) {
			Elem.Hide();
			if (Elem.ControlId == MenuName) {
				Elem.Show();
				declare CMlFrame Frame = (Elem as CMlFrame);
				declare Vec3 TeamColor = GetTeamPrimaryColor(InputPlayer.CurrentClan);
				if (InputPlayer.CurrentClan == 0) TeamColor = CL::Hex3ToRgb("3af");
				declare CMlQuad Background <=> (Frame.GetFirstChild("background") as CMlQuad);
				Background.ModulateColor = TeamColor;
				foreach (i => Elem2 in Frame.Controls) {
					Elem2.RelativeScale = 0.;
					AnimMgr.Flush(Elem2);
					AnimMgr.Add(Elem2, "<elem scale=\"1\" />", Now - 200 + 75*i, 500, CAnimManager::EAnimManagerEasing::ElasticOut);
				}
			}
		}
	}

	Void Init() {
		// Body
		PlayerCardFramesTeam1 = {{{PlayerCardFramesTeam1ScriptList}}};
		PlayerCardFramesTeam2 = {{{PlayerCardFramesTeam2ScriptList}}};
		// Page controls
		FramePageControls = (Page.GetFirstChild("page-controls") as CMlFrame);
		QuadPagePrevious = (Page.GetFirstChild("page-previous") as CMlQuad);
		QuadPageNext = (Page.GetFirstChild("page-next") as CMlQuad);
		CurrentPageIndex = 0;
	}

	main() {
		declare Boolean MenuStatusOld = Playground.IsInGameMenuDisplayed;
		Init();
		if (Playground.IsInGameMenuDisplayed)	ShowMenu("main-menu");

		while (True) {
			yield;

			if (Playground.IsInGameMenuDisplayed != MenuStatusOld ) {
				MenuStatusOld = Playground.IsInGameMenuDisplayed;
				if (Playground.IsInGameMenuDisplayed) {
					ShowMenu("main-menu");
				}
			}
			foreach(Event in PendingEvents) {
				if (Event.Type == CMlScriptEvent::Type::KeyPress) {
					if (Page.MainFrame.Visible == True && Event.KeyName == "Escape") {
						CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);
					}
				}
				if (Event.Type == CMlScriptEvent::Type::MouseClick) {
					switch(Event.ControlId) {
						case "page-previous": {
							CurrentPageIndex -= 1;
							UpdateCurrentPage();
							continue;
						}
						case "page-next": {
							CurrentPageIndex += 1;
							UpdateCurrentPage();
							continue;
						}
					}
					declare Text action = Event.Control.DataAttributeGet("action");
					switch (action) {
						case "ShowMenu": {
							ShowMenu("main-menu");
						}
						case "Teams": {
							CurrentPageIndex = 0;
							UpdateCurrentPage();
							ShowMenu("teams-menu");
						}
						case "Setup": {
							TriggerPageAction("maniaplanet:editsettings");
						}
						case "Resume": {
							CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);
						}
						case "Balance":  {
							Playground.RequestAutoTeamBalance();
							CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);
						}
						case "Spectate": {
							Playground.RequestSpectatorClient( !InputPlayer.RequestsSpectate );
						}
						case "JoinTeam1": {
							Playground.JoinTeam1();
							CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);
						}
						case "JoinTeam2": {
							Playground.JoinTeam2();
							CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);
						}
						case "Quit": {
							Playground.QuitServer(True);
						}
					}
				}
			}
		}
	}
	--></script>
	</manialink>
	""";
}