//#RequireContext CSmMlScriptIngame

#Include	"Libs/Zrx/ModeLibs/FlagRush/UI/UIShared.Script.txt"	as UIShared
#Include "Libs/Zrx/ModeLibs/FlagRush/FlagRush_Map.Script.txt"	as FlagRush_Map

Text GetManialink() {

	declare Text BasesFrameInstancesXml;
	declare Integer NbBasesPerTeam = FlagRush_Map::GetBases(1).count;
	for(I, 0, NbBasesPerTeam-1) {
		BasesFrameInstancesXml ^= """
		<frameinstance modelid="model-marker-base" id="marker-base-team1-{{{I}}}"/>
		<frameinstance modelid="model-marker-base" id="marker-base-team2-{{{I}}}"/>
		""";
	}

	declare Text FlagSpawnMarkerFrameInstancesXml;
	for(I, 0, FlagRush_Map::GetFlagSpawns().count - 1) {
		FlagSpawnMarkerFrameInstancesXml ^= """
		<frameinstance modelid="model-marker-flag" id="marker-flag-spawn-{{{I}}}" scale="0.7"/>
		""";
	}

	return """
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
	<manialink version="3" name="FlagRush_Markers">

		<framemodel id="model-marker-base" hidden="1">
			<quad pos="0 0" z-index="1" size="10 10" bgcolor="FFFA" style="ManiaPlanetMainMenu" substyle="IconHome" halign="center" valign="center" colorize="fff" id="quad-base"/>
		</framemodel>

		<framemodel id="model-marker-flag" hidden="1">
			<quad pos="0 0.5" z-index="2" size="10 10" halign="center" style="UIConstruction_Buttons" substyle="Validate" id="quad-flag" valign="center"/>
			<quad id="up" pos="0 7.5" z-index="0" size="6 6" opacity="1" style="UICommon64_2" substyle="ArrowUpSlim_light" halign="center" valign="center" hidden="1" />
			<quad id="down" pos="0 -5.5" z-index="0" size="6 6" opacity="1" style="UICommon64_2" substyle="ArrowDownSlim_light" halign="center" valign="center" hidden="1"/>

			<frame id="gauge-frame" pos="0 7" scale="0.6">
				<frame size="10 20" pos="0 0">
					<quad id="gauge2" pos="0 -10" z-index="0" size="10 20" colorize="FFF" image="file://Media/Manialinks/Nadeo/Trackmania/Ingame/NewSpeed-gauge1.dds" valign="center" halign="right" rot="0" hidden="1" />
				</frame>
				<frame size="10 20" pos="-10 0">
					<quad id="gauge1" pos="10 -10" z-index="0" size="10 20" colorize="FFF" image="file://Media/Manialinks/Nadeo/Trackmania/Ingame/NewSpeed-gauge1.dds" valign="center" halign="right" rot="180" hidden="1"/>
				</frame>
			</frame>
		</framemodel>

		{{{BasesFrameInstancesXml}}}

		<frameinstance modelid="model-marker-flag" id="marker-flag"/>

		{{{FlagSpawnMarkerFrameInstancesXml}}}

		<script><!--
			#Include "MathLib" as ML

			{{{ UIShared::GetTeamColorNetreadFunctions() }}}
			{{{ UIShared::GetUtilFunctions() }}}

			/** render progress between 0.0 - 1.0 */
			Void RenderProgress(CMlFrame Frame, Real Value) {
				declare CMlQuad Gauge1 = Frame.GetFirstChild("gauge1") as CMlQuad;
				declare CMlQuad Gauge2 = Frame.GetFirstChild("gauge2") as CMlQuad;
				if (Value <= 0.01) {
					Gauge1.Hide();
					Gauge2.Hide();
					return;
				} else if (Value <= 0.5) {
					Gauge1.Show();
					Gauge2.Hide();
					Gauge1.RelativeRotation = -180. + Value * 360;
					Gauge2.RelativeRotation = 0.;
				} else {
					Gauge1.Show();
					Gauge2.Show();
					Gauge1.RelativeRotation = 0.;
					Gauge2.RelativeRotation = 180. + Value * 360;
				}
			}

			main() {
				declare CMlFrame[] Team1BaseMarkerFrames;
				declare CMlFrame[] Team2BaseMarkerFrames;
				for(I, 0, {{{NbBasesPerTeam-1}}}) {
					declare CMlFrame FrameMarkerBase1 = (Page.GetFirstChild("marker-base-team1-" ^ I) as CMlFrame);
					Team1BaseMarkerFrames.add(FrameMarkerBase1);

					declare CMlFrame FrameMarkerBase2 = (Page.GetFirstChild("marker-base-team2-" ^ I) as CMlFrame);
					Team2BaseMarkerFrames.add(FrameMarkerBase2);
				}

				declare CMlFrame FrameMarkerFlag = (Page.GetFirstChild("marker-flag") as CMlFrame);
				declare CMlFrame FrameGauge = (Page.GetFirstChild("gauge-frame") as CMlFrame);
				declare CMlQuad QuadMarkerFlag = (FrameMarkerFlag.GetFirstChild("quad-flag") as CMlQuad);
				declare CMlQuad QuadFlagUp = (FrameMarkerFlag.GetFirstChild("up") as CMlQuad);
				declare CMlQuad QuadFlagDown = (FrameMarkerFlag.GetFirstChild("down") as CMlQuad);

				QuadMarkerFlag.Colorize = GetTeamPrimaryColor(Null);

				declare netread Integer Net_FlagRush_FlagCarrierClan for Teams[0];
				declare netread Integer Net_FlagRush_FlagGaugeStartDate for Teams[0];
				declare netread Integer Net_FlagRush_FlagGaugeDuration for Teams[0];
				declare netread Text	  Net_FlagRush_FlagCarrierLogin for Teams[0];
				declare netread Vec3 		Net_FlagRush_FlagPosition for Teams[0];

				while(True) {
					yield;

					/* Colors */

					// Get the right color for the flag
					declare Vec3 FlagColor = GetTeamPrimaryColor(Null);
					if (Net_FlagRush_FlagCarrierClan > 0) FlagColor = GetTeamPrimaryColor(Teams[Net_FlagRush_FlagCarrierClan - 1]);

					// Apply colors
					QuadMarkerFlag.Colorize = FlagColor;

					foreach (MarkerFrame in Team1BaseMarkerFrames) {
						(MarkerFrame.GetFirstChild("quad-base") as CMlQuad).Colorize = GetTeamPrimaryColor(Teams[0]);
					}
					foreach (MarkerFrame in Team2BaseMarkerFrames) {
						(MarkerFrame.GetFirstChild("quad-base") as CMlQuad).Colorize = GetTeamPrimaryColor(Teams[1]);
					}

					declare CSmPlayer Player <=> GetPlayer(Net_FlagRush_FlagCarrierLogin);
					if (GUIPlayer != Null) {
						declare Real Distance;
						if (Player != Null) Distance = GetPlayerPosition(Player).Y - GetPlayerPosition(GUIPlayer).Y;
						else Distance = Net_FlagRush_FlagPosition.Y - GetPlayerPosition(GUIPlayer).Y;

						QuadFlagDown.Visible = Distance <= {{{ -UIShared::C_FlagMarkerHeightIndicatorThreshold }}};
						QuadFlagUp.Visible = Distance >= {{{ UIShared::C_FlagMarkerHeightIndicatorThreshold }}};
					}

					/* Gauge animation */
					// Flag gauge end in future
					declare Boolean IsEndInFuture = Net_FlagRush_FlagGaugeStartDate + Net_FlagRush_FlagGaugeDuration > GameTime;
					if (IsEndInFuture && Net_FlagRush_FlagGaugeDuration > 0) {
						declare Ratio = (0. + Net_FlagRush_FlagGaugeDuration - (GameTime - Net_FlagRush_FlagGaugeStartDate)) / Net_FlagRush_FlagGaugeDuration;
						declare Real Value = ML::Clamp(Ratio, 0.0, 1.0);
						FrameGauge.Show();
						RenderProgress(FrameMarkerFlag, Value);
						QuadMarkerFlag.Opacity = 0.5;
					}
					// Flag gauge already finished
					else {	// Flag respawn already happened
						FrameGauge.Hide();
						QuadMarkerFlag.Opacity = 1.;
					}
				}
			}
		--></script>
</manialink>
	""";
}
