#Include "TextLib" as TL
#Include "Libs/Zrx/ModeLibs/FlagRush/UI/UIShared.Script.txt" as UIShared
#Include "Libs/Zrx/ModeLibs/FlagRush/FlagRush_Teams.Script.txt" as FlagRush_Teams


#Const C_BackgroundZIndex					0
#Const C_RadarBaseSize						100.
#Const C_MarkerFadeStart					0.80
#Const C_MarkerFadeEnd 						0.95
#Const C_PlayerMarkerGlowOpacity	0.5
#Const C_PlayerMarkerIconOpacity	1.

#Struct K_Config {
	Real Scale;
	Real MarkerScale;
	Real Zoom;
	Vec2 Position;
	Real BackgroundOpacity;
	Real DetailOpacity;
}

declare K_Config G_Config;

Void SetConfig(K_Config Config) {
	G_Config = Config;
}

Text GetCustomizationManialink() {
	return """
	<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
	<manialink version="3" name="FlagRush_Radar_Customization">
		<frame id="map-frame" scale="{{{ G_Config.Scale }}}" pos="{{{ G_Config.Position.X }}} {{{ G_Config.Position.Y }}}">
			<quad size="{{{C_RadarBaseSize * 1.02}}} {{{C_RadarBaseSize * 1.02}}}" valign="center" halign="center" opacity="0" bgcolor="f00" id="drag-activator" scriptevents="1"/>
			<quad pos="{{{C_RadarBaseSize / 2}}} {{{-C_RadarBaseSize / 2}}}" z-index="1" size="15 15" valign="bottom" halign="right" scriptevents="1" style="UICommon64_1" substyle="Parameters_light" id="settings-toggle-map" hidden="1"/>
		</frame>

		<frame id="customization-settings-dialog" z-index="1047" hidden="1">

			<quad  z-index="0" size="50 25" style="UICommon128_1" substyle="BgFrame1" halign="center" valign="center" scale="2" colorize="000" opacity="0.75"/>

			<frame id="header" z-index="1" pos="0 20">
				<quad pos="0" size="50 5" opacity="0.75" style="UICommon128_1" substyle="BgFrame1" halign="center" colorize="000" scale="2" valign="center"/>	
				<label pos="0" z-index="1" size="90 10" text="Radar settings:" halign="center" valign="center" textfont="GameFontSemiBold" textsize="5"/>
				<quad pos="45" z-index="01" size="7.5 7.5" bgcolor="FFF" halign="right" valign="center" style="UICommon64_1" substyle="Cross_light" scriptevents="1" id="settings-toggle-dialog"/>
			</frame>

			<frame id="body" z-index="1" pos="0 ">
				<frame id="position" pos="0 10">
					<label pos="-45" z-index="0" size="40 5" text="Position:" textfont="GameFontRegular" halign="left" valign="center"/>
					<frame id="position-entries" pos="22.5">
						<entry  size="20 5" halign="center" valign="center" pos="-12.5" scriptevents="1" id="position-x"/>
						<entry  size="20 5" halign="center" valign="center" pos="12.5" scriptevents="1" id="position-y"/>
					</frame>
				</frame>

				<frame id="scale">
					<label pos="-45" z-index="0" size="40 5" text="Scale:" textfont="GameFontRegular" halign="left" valign="center"/>
					<slider halign="right" pos="22.5 0" valign="center" size="45 10" id="slider-scale" scriptevents="1"></slider>
				</frame>

				<frame id="background-opacity" pos="0 -10">
					<label pos="-45" z-index="0" size="40 5" text="Background Opacity:" textfont="GameFontRegular" halign="left" valign="center"/>
					<slider halign="right" pos="22.5 0" valign="center" size="45 10" id="slider-background-opacity" scriptevents="1"></slider>
				</frame>

				<frame id="line-opacity" pos="0 -20">
					<label pos="-45" z-index="0" size="40 5" text="Line Opacity:" textfont="GameFontRegular" halign="left" valign="center"/>
					<slider halign="right" pos="22.5 0" valign="center" size="45 10" id="slider-line-opacity" scriptevents="1"></slider>
				</frame>		
			</frame>

		</frame>

		<script><!--
			#Include "TextLib" as TL
			#Include "MathLib" as ML
		
			declare CMlFrame MapFrame;
			declare CMlFrame SettingsDialogFrame;
			
			declare CMlQuad SettingsButton;
		
			declare CMlEntry PositionXEntry;
			declare CMlEntry PositionYEntry;
			declare CMlSlider ScaleSlider;
			declare CMlSlider BackgroundOpacitySlider;
			declare CMlSlider LineOpacitySlider;
			
			/**
			 * Clamps the radar position so it stays inside the screen.
			 * Else it could be unrecoverable
			 */
			Vec2 ClampToScreen(Vec2 Position) {
				return < ML::Clamp(Position.X, -160., 160.), ML::Clamp(Position.Y, -90., 90.) >;
			}
			
			/**
			 * Updates the persistent settings
			 */
			Void UpdateSettings() {
				declare persistent Vec2 Persistent_FlagRush_RadarPosition for UserMgr.MainUser = {{{G_Config.Position}}};
				declare persistent Real Persistent_FlagRush_RadarScale for UserMgr.MainUser = {{{G_Config.Scale}}};
				declare persistent Real Persistent_FlagRush_BackgroundOpacity for UserMgr.MainUser = {{{G_Config.BackgroundOpacity}}};
				declare persistent Real Persistent_FlagRush_DetailOpacity for UserMgr.MainUser = {{{G_Config.DetailOpacity}}};
				
				// Validate entries
				declare Real PosX = TL::ToReal(PositionXEntry.Value);
				if (PosX == -1.) PosX = Persistent_FlagRush_RadarPosition.X;
				
				declare Real PosY = TL::ToReal(PositionYEntry.Value);
				if (PosY == -1.) PosY = Persistent_FlagRush_RadarPosition.Y;
				
				// Clamp to screen and write to persistent variable
				Persistent_FlagRush_RadarPosition = ClampToScreen(<PosX, PosY>);

				// Update the entries if window was moved by mouse
				PositionXEntry.Value = TL::ToText(Persistent_FlagRush_RadarPosition.X);
				PositionYEntry.Value = TL::ToText(Persistent_FlagRush_RadarPosition.Y);

				// Update the slider values
				Persistent_FlagRush_RadarScale = ScaleSlider.Value;
				Persistent_FlagRush_BackgroundOpacity = BackgroundOpacitySlider.Value;
				Persistent_FlagRush_DetailOpacity = LineOpacitySlider.Value;
			}
		
			main() {

				// Get references
				MapFrame = (Page.GetFirstChild("map-frame") as CMlFrame);
				SettingsDialogFrame = (Page.GetFirstChild("customization-settings-dialog") as CMlFrame);
				
				SettingsButton = (Page.GetFirstChild("settings-toggle-map") as CMlQuad);
				
				PositionXEntry = (Page.GetFirstChild("position-x") as CMlEntry);
				PositionYEntry = (Page.GetFirstChild("position-y") as CMlEntry);
				ScaleSlider = (Page.GetFirstChild("slider-scale") as CMlSlider);
				BackgroundOpacitySlider = (Page.GetFirstChild("slider-background-opacity") as CMlSlider);
				LineOpacitySlider = (Page.GetFirstChild("slider-line-opacity") as CMlSlider);

				// Some variables to keep track of states
				declare Boolean Dragging = False;
				declare Vec2 DraggingOffset;
				
				declare Boolean HoverSettingsButton;
				declare Boolean HoverDragActivator;

				declare Boolean SettingsVisibility;

				// Settings for the player
				declare persistent Vec2 Persistent_FlagRush_RadarPosition for UserMgr.MainUser = {{{G_Config.Position}}};
				declare persistent Real Persistent_FlagRush_RadarScale for UserMgr.MainUser = {{{G_Config.Scale}}};
				declare persistent Real Persistent_FlagRush_BackgroundOpacity for UserMgr.MainUser = {{{G_Config.BackgroundOpacity}}};
				declare persistent Real Persistent_FlagRush_DetailOpacity for UserMgr.MainUser = {{{G_Config.DetailOpacity}}};
				
				// Init controls
				PositionXEntry.SetValueType(CMlEntry::ValueType::Ml_Real3Decimals);
				PositionYEntry.SetValueType(CMlEntry::ValueType::Ml_Real3Decimals);
				ScaleSlider.MinRange = 0.1;
				ScaleSlider.MaxRange = 1.;
				BackgroundOpacitySlider.MinRange = 0.;
				BackgroundOpacitySlider.MaxRange = 1.;
				LineOpacitySlider.MinRange = 0.;
				LineOpacitySlider.MaxRange = 1.;

				ScaleSlider.Value = Persistent_FlagRush_RadarScale;
				BackgroundOpacitySlider.Value = Persistent_FlagRush_BackgroundOpacity;
				LineOpacitySlider.Value = Persistent_FlagRush_DetailOpacity;

				while(True) {
					yield;

					// Apply settings to update the dragging area
					MapFrame.Scale = Persistent_FlagRush_RadarScale;
					MapFrame.RelativePosition_V3 = Persistent_FlagRush_RadarPosition;					
					
					// Show or hide Settings dialog
					SettingsButton.Visible = (HoverSettingsButton || HoverDragActivator) && !Dragging;
					SettingsDialogFrame.Visible = SettingsVisibility;
					if (SettingsVisibility) {
						UpdateSettings();
					}
					
					// Handle dragging
					if (Dragging) {
						// Mouse down = still dragging
						if (MouseLeftButton) {
							Persistent_FlagRush_RadarPosition = Input.MousePos + DraggingOffset;
							MapFrame.RelativePosition_V3 = Persistent_FlagRush_RadarPosition;
							PositionXEntry.Value = TL::ToText(Persistent_FlagRush_RadarPosition.X);
							PositionYEntry.Value = TL::ToText(Persistent_FlagRush_RadarPosition.Y);
						} else {	// Finish dragging and save persistently
							Dragging = False;
							Persistent_FlagRush_RadarPosition = ClampToScreen(Persistent_FlagRush_RadarPosition);
							UserMgr.MainUser.PersistentSave();
						}
					}

					foreach (Event in PendingEvents) {
						switch (Event.Type) {
							case CMlScriptEvent::Type::MouseClick: {
								if (Event.ControlId == "drag-activator") {
									Dragging = True;
									DraggingOffset = MapFrame.AbsolutePosition_V3 - Input.MousePos;
								} else if (TL::StartsWith("settings-toggle", Event.ControlId)) {
									if (SettingsVisibility) UserMgr.MainUser.PersistentSave();
									SettingsVisibility = !SettingsVisibility;
								} 
							}
							case CMlScriptEvent::Type::MouseRightClick: {
								if (Event.ControlId == "drag-activator") {
									Dragging = False;
									Persistent_FlagRush_RadarPosition = {{{G_Config.Position}}};
									PositionXEntry.Value = TL::ToText(Persistent_FlagRush_RadarPosition.X);
									PositionYEntry.Value = TL::ToText(Persistent_FlagRush_RadarPosition.Y);
								} else if (Event.Control == ScaleSlider) {
									Persistent_FlagRush_RadarScale = {{{G_Config.Scale}}};
									ScaleSlider.Value = {{{G_Config.Scale}}};
								} else if (Event.Control == BackgroundOpacitySlider) {
									Persistent_FlagRush_BackgroundOpacity = {{{G_Config.BackgroundOpacity}}};
									BackgroundOpacitySlider.Value = {{{G_Config.BackgroundOpacity}}};
								} else if (Event.Control == LineOpacitySlider) {
									Persistent_FlagRush_DetailOpacity = {{{G_Config.DetailOpacity}}};
									LineOpacitySlider.Value = {{{G_Config.DetailOpacity}}};
								}
							}
							case CMlScriptEvent::Type::MouseOver: {
								if (Event.ControlId == "drag-activator") HoverDragActivator = True;
								else if (Event.Control == SettingsButton) HoverDragActivator = True;
							}
							case CMlScriptEvent::Type::MouseOut: {
								if (Event.ControlId == "drag-activator") HoverDragActivator = False;
								else if (Event.Control == SettingsButton) HoverDragActivator = False;
							}
						}
					}
				}
			}
		--></script>
	</manialink>
	""";
}

Text GetBackgroundManialink() {
	return """
	<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
	<manialink version="3" name="FlagRush_Radar_Background">
		<frame id="radar-background" scale="{{{ G_Config.Scale }}}" pos="{{{ G_Config.Position.X }}} {{{ G_Config.Position.Y }}}" hidden="1">
			<quad id="radar-border" size="{{{C_RadarBaseSize * 1.02}}} {{{C_RadarBaseSize * 1.02}}}"  image="file://Media/Painter/Stencils/11-Ellipses/_EllipseRoundc/Brush.tga" valign="center" halign="center"/>

			<!-- inner decoration -->
			<quad id="detail-1" pos="0 {{{C_RadarBaseSize / 2}}}" size="1 {{{C_RadarBaseSize * 0.375}}}" bgcolor="000" opacity="{{{G_Config.DetailOpacity}}}" halign="center" valign="top"/>
			<quad id="detail-2" pos="0 {{{-C_RadarBaseSize / 2}}}" size="1 {{{C_RadarBaseSize * 0.375}}}" bgcolor="000" opacity="{{{G_Config.DetailOpacity}}}" halign="center" valign="bottom"/>
			<quad id="detail-3" pos="{{{C_RadarBaseSize / 2}}} 0" size="{{{C_RadarBaseSize * 0.375}}} 1" bgcolor="000" opacity="{{{G_Config.DetailOpacity}}}" halign="right" valign="center"/>
			<quad id="detail-4" pos="{{{-C_RadarBaseSize / 2}}} 0" size="{{{C_RadarBaseSize * 0.375}}} 1" bgcolor="000" opacity="{{{G_Config.DetailOpacity}}}" halign="left" valign="center"/>

			<quad id="detail-5" size="{{{C_RadarBaseSize * 0.75}}} {{{C_RadarBaseSize * 0.75}}}" image="file://Media/Painter/Stencils/11-Ellipses/_EllipseRoundc/Brush.tga" valign="center" halign="center" modulatecolor="000" opacity="{{{G_Config.DetailOpacity}}}"/>
			<quad id="detail-6" size="{{{C_RadarBaseSize * 0.5}}} {{{C_RadarBaseSize * 0.5}}}" image="file://Media/Painter/Stencils/11-Ellipses/_EllipseRoundc/Brush.tga" valign="center" halign="center" modulatecolor="000" opacity="{{{G_Config.DetailOpacity}}}"/>

			<!-- background -->
			<quad id="background" size="{{{C_RadarBaseSize}}} {{{C_RadarBaseSize}}}" image="file://Media/Painter/Stencils/01-EllipseRound/Brush.tga" valign="center" halign="center" modulatecolor="111" opacity="{{{G_Config.BackgroundOpacity}}}"/>
		</frame>

		<script><!--
			{{{ UIShared::GetTeamColorNetreadFunctions() }}}

			CMlQuad[] GetDetailControls() {
				declare CMlQuad[] Quads;
				for (I, 1, 6) Quads.add(Page.GetFirstChild("detail-"^I) as CMlQuad);
				return Quads;
			}

			main() {
				declare CMlFrame FrameBackground = (Page.GetFirstChild("radar-background") as CMlFrame);
				declare CMlQuad Background = (Page.GetFirstChild("background") as CMlQuad);
				declare CMlQuad[] Details = GetDetailControls();
				declare CMlQuad Border = (FrameBackground.GetFirstChild("radar-border") as CMlQuad);

				declare persistent Vec2 Persistent_FlagRush_RadarPosition for UserMgr.MainUser = {{{G_Config.Position}}};
				declare persistent Real Persistent_FlagRush_RadarScale for UserMgr.MainUser = {{{G_Config.Scale}}};
				declare persistent Real Persistent_FlagRush_BackgroundOpacity for UserMgr.MainUser = {{{G_Config.BackgroundOpacity}}};
				declare persistent Real Persistent_FlagRush_DetailOpacity for UserMgr.MainUser = {{{G_Config.DetailOpacity}}};

				while(True) {
					yield;

					if (GUIPlayer == Null) {
						FrameBackground.Hide();
						continue;
					}

					// Update Settings
					FrameBackground.RelativePosition_V3 = Persistent_FlagRush_RadarPosition;
					FrameBackground.Scale = Persistent_FlagRush_RadarScale;
					Background.Opacity = Persistent_FlagRush_BackgroundOpacity;
					foreach (Detail in Details) Detail.Opacity = Persistent_FlagRush_DetailOpacity;

					Border.ModulateColor = GetTeamPrimaryColor(GUIPlayer.CurrentClan);

					FrameBackground.Show();
				}
			}
		--></script>
	</manialink>
	""";
}

Text GetMarkersManialink() {
	declare Text[] PlayerMarkerInstances = [];
	foreach (Index => Player in Players) PlayerMarkerInstances.add("""<frameinstance modelid="marker-player" id="marker-player-{{{ Index }}}" scale="{{{ G_Config.MarkerScale }}}"/>""");

	return """
	<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
	<manialink version="3" name="FlagRush_Radar_Markers">
		<framemodel id="marker-player">
			<quad size="10 10" halign="center" valign="center" style="UICommon64_1" substyle="ArrowUp_light" id="icon"/>
			<quad size="15 15" halign="center" valign="center" style="Bgs1InRace" substyle="Glow" id="glow"/>
		</framemodel>

		<framemodel id="marker-flag">
			<quad size="10 10" halign="center" valign="center" style="UIConstruction_Buttons" substyle="Validate" id="icon"/>
			<quad size="17.5 17.5" halign="center" valign="center" style="Bgs1InRace" substyle="Glow" id="glow" opacity="0.5" hidden="1"/>
			<quad id="up" pos="0 5.5" size="6 6" style="UICommon64_2" substyle="ArrowUpSlim_light" halign="center" valign="center" hidden="1" />
			<quad id="down" pos="0 -5.5" size="6 6" style="UICommon64_2" substyle="ArrowDownSlim_light" halign="center" valign="center" hidden="1"/>
		</framemodel>

		<frame z-index="{{{ C_BackgroundZIndex + 2 }}}" id="marker-frame" scale="{{{ G_Config.Scale }}}" pos="{{{ G_Config.Position.X }}} {{{ G_Config.Position.Y }}}" hidden="1">
			{{{ TL::Join("\n", PlayerMarkerInstances) }}}
			<frameinstance modelid="marker-flag" id="marker-flag" scale="{{{ G_Config.MarkerScale }}}"/>
		</frame>

		<script><!--
		#Include "MathLib" as ML

		declare CMlFrame[] PlayerMarkerFrames;
		declare CMlFrame FlagMarkerFrame;
		declare CMlQuad FlagMarkerIcon;
		declare CMlQuad FlagMarkerGlow;
		declare CMlQuad FlagMarkerUp;
		declare CMlQuad FlagMarkerDown;

		{{{ UIShared::GetTeamColorNetreadFunctions() }}}
		{{{ UIShared::GetUtilFunctions() }}}

		CMlFrame[] GetPlayerMarkerFrames() {
			declare CMlFrame[] Frames = [];
			for (Index, 0, {{{ PlayerMarkerInstances.count -1 }}}) Frames.add((Page.GetFirstChild("marker-player-" ^ Index) as CMlFrame));
			return Frames;
		}

		CMlQuad GetPlayerMarkerIcon(CMlFrame MarkerFrame) {
			return (MarkerFrame.GetFirstChild("icon") as CMlQuad);
		}

		Vec2 Rotate(Real Angle, Vec2 Vector) {
			declare Real Cosinus = ML::Cos(Angle);
			declare Real Sinus = ML::Sin(Angle);
			return <Cosinus, Sinus> * Vector.X + <Sinus, - Cosinus> * Vector.Y;
		}

		Void UpdateFlagMarker() {
			// Determine releative position on radar
			declare netread Vec3 Net_FlagRush_FlagPosition for Teams[0];
			declare netread Text Net_FlagRush_FlagCarrierLogin for Teams[0];

			declare Vec3 RelativePosition;
			declare CSmPlayer FlagCarrierPlayer <=> GetPlayer(Net_FlagRush_FlagCarrierLogin);
			if(Net_FlagRush_FlagCarrierLogin == "" || FlagCarrierPlayer == Null) {
				RelativePosition = Net_FlagRush_FlagPosition - GetPlayerPosition(GUIPlayer);
				FlagMarkerIcon.Colorize = {{{ FlagRush_Teams::C_DefaultNeutralColor}}};
			} else {
				RelativePosition = GetPlayerPosition(FlagCarrierPlayer) - GetPlayerPosition(GUIPlayer);
				FlagMarkerIcon.Colorize = GetTeamPrimaryColor(FlagCarrierPlayer.CurrentClan);
			}
			declare Vec2 RelativeRadarPosition = Rotate(-GetPlayerYaw(GUIPlayer), <-RelativePosition.X, -RelativePosition.Z>);

			// If too far outside, still show on border
			declare Distance = ML::Distance(<0., 0.> , RelativeRadarPosition);
			declare Vec2 UnitDirection = RelativeRadarPosition * (1 / (ML::Abs(Distance) + 0.001));
			RelativeRadarPosition = UnitDirection * ML::Clamp(Distance, {{{ -C_RadarBaseSize / 2 / G_Config.Zoom }}}, {{{ C_RadarBaseSize / 2 / G_Config.Zoom}}});

			// Update marker frame
			FlagMarkerFrame.RelativePosition_V3 = RelativeRadarPosition * {{{ G_Config.Zoom }}};
			FlagMarkerFrame.ZIndex = Net_FlagRush_FlagPosition.Y;
			FlagMarkerGlow.Visible = FlagCarrierPlayer != Null;
			FlagMarkerUp.Visible = RelativePosition.Y >= {{{ UIShared::C_FlagMarkerHeightIndicatorThreshold }}};
			FlagMarkerDown.Visible = RelativePosition.Y <= {{{ -UIShared::C_FlagMarkerHeightIndicatorThreshold }}};
		}

		Void UpdatePlayerMarker(CSmPlayer Player, CMlFrame MarkerFrame) {
			declare netread Text Net_FlagRush_FlagCarrierLogin for Teams[0];

			if (Player.User.Login == Net_FlagRush_FlagCarrierLogin) {
				MarkerFrame.Hide();
				return;
			}

			if (Player == GUIPlayer) {
				// Always show self or spectated player in center facing up
				MarkerFrame.Show();
				MarkerFrame.RelativePosition_V3 = <0., 0.>;
				MarkerFrame.RelativeRotation = 0.;
				(MarkerFrame.GetFirstChild("icon") as CMlQuad).Opacity = {{{ C_PlayerMarkerIconOpacity }}};
				(MarkerFrame.GetFirstChild("glow") as CMlQuad).Opacity = {{{ C_PlayerMarkerGlowOpacity }}};
			} else {
				// Determine relative position on radar
				declare Vec3 RelativePosition = GetPlayerPosition(Player) - GetPlayerPosition(GUIPlayer);
				declare Vec2 RelativeRadarPosition = Rotate(-GetPlayerYaw(GUIPlayer), <-RelativePosition.X, -RelativePosition.Z>) * {{{ G_Config.Zoom }}};

				// Hide when outside
				declare OffsetPercentage = ML::Distance(<0., 0.> , RelativeRadarPosition) / {{{ C_RadarBaseSize / 2 }}};
				if (OffsetPercentage > {{{ C_MarkerFadeEnd }}}) {
					MarkerFrame.Hide();
					return;
				}
				MarkerFrame.Show();

				// Determine relative rotation to the player
				declare Real RelativeYaw;
				if (Net_FlagRush_FlagCarrierLogin == Player.User.Login) RelativeYaw = 0.;
				else RelativeYaw = GetPlayerYaw(Player) - GetPlayerYaw(GUIPlayer);

				// Fade when close too the edge
				declare Real Opacity = 1.0;
				if (OffsetPercentage > {{{ C_MarkerFadeStart }}}) {
					declare Real FadeProgress = ({{{ C_MarkerFadeEnd }}} - OffsetPercentage) / ({{{ C_MarkerFadeEnd - C_MarkerFadeStart }}});
					Opacity = ML::Clamp(FadeProgress, 0., 1.);
				}

				// Update marker frame
				MarkerFrame.RelativePosition_V3 = RelativeRadarPosition;
				MarkerFrame.ZIndex = GetPlayerPosition(Player).Y;
				MarkerFrame.RelativeRotation = -RelativeYaw / ML::Pi * 180;
				(MarkerFrame.GetFirstChild("icon") as CMlQuad).Opacity = Opacity * {{{ C_PlayerMarkerIconOpacity }}};
				(MarkerFrame.GetFirstChild("glow") as CMlQuad).Opacity = Opacity * {{{ C_PlayerMarkerGlowOpacity }}};
			}
		}

		main() {
			declare CMlFrame MainFrame = (Page.GetFirstChild("marker-frame") as CMlFrame);
			FlagMarkerFrame = (Page.GetFirstChild("marker-flag") as CMlFrame);
			FlagMarkerIcon = (FlagMarkerFrame.GetFirstChild("icon") as CMlQuad);
			FlagMarkerGlow = (FlagMarkerFrame.GetFirstChild("glow") as CMlQuad);
			FlagMarkerUp = (FlagMarkerFrame.GetFirstChild("up") as CMlQuad);
			FlagMarkerDown = (FlagMarkerFrame.GetFirstChild("down") as CMlQuad);
			PlayerMarkerFrames = GetPlayerMarkerFrames();

			declare netread Text Net_FlagRush_FlagCarrierLogin for Teams[0];

			declare persistent Vec2 Persistent_FlagRush_RadarPosition for UserMgr.MainUser = {{{G_Config.Position}}};
			declare persistent Real Persistent_FlagRush_RadarScale for UserMgr.MainUser = {{{G_Config.Scale}}};

			while (True) {
				yield;

				if(GUIPlayer == Null) {
					MainFrame.Hide();
					continue;
				}
				MainFrame.Show();
				
				// Update settings
				MainFrame.RelativePosition_V3 = Persistent_FlagRush_RadarPosition;
				MainFrame.Scale = Persistent_FlagRush_RadarScale;

				// Update player markers
				declare Integer ActualPlayerIndex = -1;
				foreach (Player in Players) {
					if (Player.RequestsSpectate) continue;
					ActualPlayerIndex += 1;
					if (ActualPlayerIndex >= PlayerMarkerFrames.count) break;

					declare CMlFrame PlayerFrame <=> PlayerMarkerFrames[ActualPlayerIndex];
					declare CMlQuad PlayerIcon <=> GetPlayerMarkerIcon(PlayerFrame);

					// Change Icon Color
					PlayerIcon.Colorize = GetTeamPrimaryColor(Player.CurrentClan);

					// Position Marker
					UpdatePlayerMarker(Player, PlayerFrame);
				}

				// Update flag marker
				UpdateFlagMarker();
			}
		}
		--></script>
	</manialink>
	""";
}