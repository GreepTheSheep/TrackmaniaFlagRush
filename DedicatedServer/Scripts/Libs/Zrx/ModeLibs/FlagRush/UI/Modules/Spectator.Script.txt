//#RequireContext CSmMlScriptIngame

Text GetManialink() {
	return """
	<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
	<manialink version="3" name="FlagRush_SpectatorUI">
	<frame id="Spectator-frame" pos="135 -40" scale="0.75">
		<quad pos="0 0" z-index="0" size="50 10" style="UICommon64_1" substyle="BgFrame1" halign="center" valign="center" colorize="000" opacity="0.75"/>
		<quad pos="20 0" z-index="1" size="10 10" id="button-ready-background" style="UICommon64_1" substyle="BgFrame1" halign="center" valign="center" colorize="000"/>
		<label pos="20 0" z-index="2" size="10 10" id="button-ready-icon" text="" halign="center" valign="center" style="Default" textfont="GameFontBlack" textsize="4"/>
		<quad pos="-2.5 0" z-index="3" size="50 10" id="button-ready-activator" style="UICommon64_1" substyle="BgFrame1" halign="center" valign="center" opacity="0" scriptevents="1"/>
		<label pos="-4 0" z-index="5" size="40 8" text="Follow Flag Carrier" halign="center" valign="center" textsize="2" style="Default" textfont="GameFontSemiBold"/>
	</frame>

	<script><!--
	#Include "TextLib" as TL
	#Include "MathLib" as ML
	#Include "ColorLib" as CL

	#Const C_Color_Follow <0.1, 0.7, 0.1>
	#Const C_Color_NoFollow <0.9, 0.1, 0.1>

	declare Boolean autoFollow;

	Vec3 TransformColor(Vec3 _BaseColor, Vec3 _Transformation) {
		declare NewColor = _BaseColor;
		NewColor = CL::RgbToHsv(NewColor);
		NewColor.X = NewColor.X + _Transformation.X;
		if (NewColor.X < 0.) NewColor.X += 1.;
		if (NewColor.X > 1.) NewColor.X -= 1.;
		NewColor.Y = ML::Clamp(NewColor.Y + _Transformation.Y, 0., 1.);
		NewColor.Z = ML::Clamp(NewColor.Z + _Transformation.Z, 0., 1.);

		return CL::HsvToRgb(NewColor);
	}

	Vec3 GetFocusColor(Vec3 _Color) {
		return TransformColor(_Color, <-.0194, 0., -.57>);
	}

	CSmPlayer GetPlayer(Text Login) {
		foreach (Player in Players) {
			if (Player.User.Login == Login) return Player;
		}
		return Null;
	}

	Void Update() {
		declare netread Text Net_FlagRush_FlagCarrierLogin for Teams[0];
		declare login = Net_FlagRush_FlagCarrierLogin;

		if (autoFollow) {
			// spectate specific player
			if (login != "") {
				declare CSmPlayer Player <=> GetPlayer(login);
				if (Player != Null) {
					ClientUI.Spectator_SetForcedTarget_Entity(Player);
					ClientUI.SpectatorForceCameraType = 1;
				}
			} else {
				//spectate full map
				ClientUI.Spectator_SetForcedTarget_AllPlayers();
				ClientUI.SpectatorForceCameraType = -1;
			}
		} else {
			ClientUI.Spectator_SetForcedTarget_Clear();
			ClientUI.SpectatorForceCameraType = -1;
		}
	}

	Vec3 GetColor(Boolean status) {
		if (status) return C_Color_Follow;
		return C_Color_NoFollow;
	}

	main() {
		declare CMlLabel toggle = (Page.GetFirstChild("button-ready-icon") as CMlLabel);
		declare CMlQuad toggleBg = (Page.GetFirstChild("button-ready-background") as CMlQuad);
		declare CMlFrame frame <=> (Page.GetFirstChild("Spectator-frame") as CMlFrame);
		declare netread Text Net_FlagRush_FlagCarrierLogin for Teams[0];
		declare oldLogin = "";
		autoFollow = False;
		toggleBg.Colorize = C_Color_NoFollow;

		while(True) {
			yield;
			if (InputPlayer != Null && InputPlayer.RequestsSpectate == True) {
				frame.Show();
				foreach (Event in PendingEvents) {
					if (Event.ControlId == "button-ready-activator") {
						declare Vec3 color = GetColor(autoFollow);

						if (Event.Type == CMlScriptEvent::Type::MouseOver) {
							toggleBg.Colorize = GetFocusColor(color);
						}

						if (Event.Type == CMlScriptEvent::Type::MouseOut) {
							toggleBg.Colorize = color;
						}

						if (Event.Type == CMlScriptEvent::Type::MouseClick) {
							autoFollow = !autoFollow;
							toggle.Value = "";
							if (autoFollow) {
								toggle.Value = "";
							}
							toggleBg.Colorize = GetFocusColor(GetColor(autoFollow));
							Update();
						}
					}
				}
			} else {
				frame.Hide();
			}
			if (oldLogin != Net_FlagRush_FlagCarrierLogin) {
				oldLogin = Net_FlagRush_FlagCarrierLogin;
				Update();
			}
		}
	}
	--></script>
	</manialink>
	""";
}