// #RequireContext CSmMode

#Include "Libs/Nadeo/ModeLibs/Legacy/XmlRpc2.Script.txt"							 	as XmlRpc
#Include "Libs/Zrx/ModeLibs/Common/TeamPointsProgression.Script.txt" 		as TeamPointsProgression
#Include "Libs/Nadeo/TMxSM/Race/Scores.Script.txt"											as Scores
#Include "Libs/Zrx/ModeLibs/FlagRush/FlagRush_Common.Script.txt"				as FlagRush_Common
#Include "Libs/Zrx/ModeLibs/Common/PlayerTelemetry.Script.txt" 					as Telemetry

// XMLRPC events
#Const		C_XMLRPC_FlagSteal															"FlagRush.Flag.Steal"
#Const		C_XMLRPC_FlagDrop																"FlagRush.Flag.Drop"
#Const		C_XMLRPC_FlagReset															"FlagRush.Flag.Reset"
#Const		C_XMLRPC_FlagScored															"FlagRush.Flag.Scored"
#Const 		C_XMLRPC_FlagPickup															"FlagRush.Flag.Pickup"
#Const		C_XMLRPC_PlayerDeath														"FlagRush.PlayerDeath"
#Const		C_XMLRPC_Overtime																"FlagRush.Overtime"
#Const		C_XMLRPC_MatchStart															"FlagRush.Flow.MatchStart"
#Const		C_XMLRPC_MatchEnd																"FlagRush.Flow.MatchEnd"
#Const		C_XMLRPC_MapStart																"FlagRush.Flow.MapStart"
#Const		C_XMLRPC_MapEnd																	"FlagRush.Flow.MapEnd"
#Const		C_XMLRPC_RoundStart															"FlagRush.Flow.RoundStart"
#Const		C_XMLRPC_RoundEnd																"FlagRush.Flow.RoundEnd"
#Const 		C_XMLRPC_WarmUpStart 														"Trackmania.WarmUp.Start"
#Const 		C_XMLRPC_WarmUpEnd 															"Trackmania.WarmUp.End"


#Struct K_Team {
	Integer Num;
	Text Name;
}

#Struct K_RpcScore {
	Integer MatchPoints;
	Integer FlagsScored;
	Integer FlagsStealed;
	Integer FlagsAssists;
}

// Structs
#Struct K_RpcPlayer {
	Text Login;
	Text Name;
	Integer Team;
	Text TeamName;
	Vec3 Position;
}

#Struct K_RpcPlayerScore {
	Text Login;
	Text Name;
	Integer Team;
	Text TeamName;
	K_RpcScore RoundScore;
	K_RpcScore MapScore;
	K_RpcScore MatchScore;
}

#Struct K_RpcTeam {
	Integer Id;
	Text Name;
	Integer RoundScore;
	Integer MapScore;
	Integer MatchScore;
}


#Struct K_RpcFlag {
	Vec3 Position;
	K_RpcPlayer Carrier;
}

#Struct K_RpcMap {
	Text AuthorLogin;
	Text AuthorName;
	Text Name;
}


#Struct K_RpcCbCarrierFlag {
	Integer Time;
	K_RpcPlayer OldCarrier;
	K_RpcFlag Flag;
}

#Struct K_RpcCbPlayer {
	Integer Time;
	K_RpcPlayer Player;
}

#Struct K_RpcCbScoreFlag {
	Integer Time;
	K_RpcPlayer AssistPlayer;
	K_RpcPlayer Player;
	K_RpcTeam Team1Score;
	K_RpcTeam Team2Score;
}

#Struct K_RpcCbTime {
	Integer Time;
}

#Struct K_RpcCbFlow {
	Integer		Time;
	K_RpcMap 	Map;
	K_RpcTeam Team1Score;
	K_RpcTeam Team2Score;
}

#Struct K_RpcCbPlayerFlow {
	Integer		Time;
	K_RpcMap 	Map;
	K_RpcPlayerScore[] Players;
	K_RpcTeam Team1Score;
	K_RpcTeam Team2Score;
}


declare Integer G_MatchStartTime;

Void Init() {
	G_MatchStartTime = Now;
	XmlRpc::RegisterCallback(C_XMLRPC_FlagPickup, "Called when player picks up the flag");
	XmlRpc::RegisterCallback(C_XMLRPC_FlagSteal, "Called when flag is stealed");
	XmlRpc::RegisterCallback(C_XMLRPC_FlagDrop, 	"Called when flag is droped");
	XmlRpc::RegisterCallback(C_XMLRPC_FlagScored, "Called when flag is scored");
	XmlRpc::RegisterCallback(C_XMLRPC_FlagReset, "Called when flag is reset");
	XmlRpc::RegisterCallback(C_XMLRPC_Overtime, "Called when flag is reset");
	XmlRpc::RegisterCallback(C_XMLRPC_PlayerDeath, "Called when player gets out of bounds");

	XmlRpc::RegisterCallback(C_XMLRPC_MatchStart, "Called when event occurs");
	XmlRpc::RegisterCallback(C_XMLRPC_MatchEnd, "Called when event occurs");
	XmlRpc::RegisterCallback(C_XMLRPC_MapStart, "Called when event occurs");
	XmlRpc::RegisterCallback(C_XMLRPC_MapEnd, "Called when event occurs");
	XmlRpc::RegisterCallback(C_XMLRPC_RoundStart, "Called when event occurs");
	XmlRpc::RegisterCallback(C_XMLRPC_RoundEnd, "Called when event occurs");
}

Void SetMatchStart() {
	G_MatchStartTime = Now;
}

Integer GetMatchTime() {
	return Now - G_MatchStartTime;
}

K_Team GetTeamFromLogin(Text Login) {
	declare CSmPlayer Player <=> GetPlayer(Login);
	declare CTeam Team;
	if (Player == Null) return K_Team{};
	if (Player.CurrentClan > 0) Team <=> Teams[Player.CurrentClan - 1];
	if (Team == Null) return K_Team{};
	return K_Team{Num = Player.CurrentClan, Name = Team.Name };
}

K_RpcScore GetMatchScore(CSmScore Score) {
	return K_RpcScore{
		MatchPoints = Scores::GetPlayerMatchPoints(Score),
		FlagsScored = Telemetry::GetPlayerMatchInteger(Score, FlagRush_Common::C_Telemetry_Key_FlagsScored),
		FlagsStealed = Telemetry::GetPlayerMatchInteger(Score, FlagRush_Common::C_Telemetry_Key_FlagsStolen),
		FlagsAssists = Telemetry::GetPlayerMatchInteger(Score, FlagRush_Common::C_Telemerty_Key_FlagScoreAssists)
	};
}

K_RpcScore GetMapScore(CSmScore Score) {
	return K_RpcScore{
		MatchPoints = Scores::GetPlayerMatchPoints(Score),
		FlagsScored = Telemetry::GetPlayerMapInteger(Score, FlagRush_Common::C_Telemetry_Key_FlagsScored),
		FlagsStealed = Telemetry::GetPlayerMapInteger(Score, FlagRush_Common::C_Telemetry_Key_FlagsStolen),
		FlagsAssists = Telemetry::GetPlayerMapInteger(Score, FlagRush_Common::C_Telemerty_Key_FlagScoreAssists)
	};
}


K_RpcScore GetRoundScore(CSmScore Score) {
	return K_RpcScore{
		MatchPoints = Scores::GetPlayerMatchPoints(Score),
		FlagsScored = Telemetry::GetPlayerRoundInteger(Score, FlagRush_Common::C_Telemetry_Key_FlagsScored),
		FlagsStealed = Telemetry::GetPlayerRoundInteger(Score, FlagRush_Common::C_Telemetry_Key_FlagsStolen),
		FlagsAssists = Telemetry::GetPlayerRoundInteger(Score, FlagRush_Common::C_Telemerty_Key_FlagScoreAssists)
	};
}

K_RpcPlayer GetRpcPlayer(CSmPlayer Player) {
	if (Player == Null) return K_RpcPlayer{};
	declare CTeam Team;
	if (Player.CurrentClan > 0) Team <=> Teams[Player.CurrentClan - 1];
	if (Team == Null) return K_RpcPlayer{Login = Player.User.Login, Name = Player.User.Name,
		Team = Player.CurrentClan, Position = Player.Position};
	return K_RpcPlayer{Login = Player.User.Login, Name = Player.User.Name,
		Team = Player.CurrentClan, TeamName = Team.Name, Position = Player.Position
	};
}

K_RpcPlayerScore GetRpcPlayerFromScore(CSmScore Score, K_Team _Team) {
	if (Score == Null || Score.User == Null) return K_RpcPlayerScore{};
	return K_RpcPlayerScore{Login = Score.User.Login, Name = Score.User.Name,
		Team = _Team.Num, TeamName = _Team.Name,
		RoundScore = GetRoundScore(Score), MapScore = GetMapScore(Score),
		MatchScore = GetMatchScore(Score)
	};
}

K_RpcTeam GetRpcTeam(Integer Clan) {
	declare CTeam Team <=> Teams[Clan - 1];
	TeamName = "";
	if (Team != Null) TeamName = Team.Name;
	declare RoundScore = Scores::GetClanRoundPoints(Clan);
	declare MapScore	 = TeamPointsProgression::GetClanRoundsWon(Clan);
	declare MatchScore = TeamPointsProgression::GetClanMapsWon(Clan);
	return K_RpcTeam{Id = Clan, Name = TeamName, RoundScore = RoundScore, MapScore = MapScore, MatchScore = MatchScore};
}

Void SendWarmupStart() {
	declare K_RpcCbTime Data = K_RpcCbTime{Time = GetMatchTime()};
	XmlRpc::SendCallback(C_XMLRPC_WarmUpStart, [Data.tojson()]);
}

Void SendWarmupEnd() {
	declare K_RpcCbTime Data = K_RpcCbTime{Time = GetMatchTime()};
	XmlRpc::SendCallback(C_XMLRPC_WarmUpEnd, [Data.tojson()]);
}

Void SendOvertime() {
	declare K_RpcCbTime Data = K_RpcCbTime{Time = GetMatchTime()};
	XmlRpc::SendCallback(C_XMLRPC_Overtime, [Data.tojson()]);
}

Void SendFlagDrop(CSmPlayer OldCarrier, Vec3 Position) {
	declare Flag = K_RpcFlag{Position = Position, Carrier = K_RpcPlayer{} };
	declare K_RpcCbCarrierFlag Data = K_RpcCbCarrierFlag{OldCarrier = GetRpcPlayer(OldCarrier), Flag = Flag, Time = GetMatchTime()};
	XmlRpc::SendCallback(C_XMLRPC_FlagDrop, [Data.tojson()]);
}

Void SendStealFlag(CSmPlayer OldCarrier, CSmPlayer NewCarrier) {
	declare Flag = K_RpcFlag{Position = NewCarrier.Position, Carrier = GetRpcPlayer(NewCarrier) };
	declare K_RpcCbCarrierFlag Data = K_RpcCbCarrierFlag{OldCarrier = GetRpcPlayer(OldCarrier), Flag = Flag, Time = GetMatchTime()};
	XmlRpc::SendCallback(C_XMLRPC_FlagSteal, [Data.tojson()]);
}

Void SendFlagReset() {
	declare K_RpcCbTime Data = K_RpcCbTime{Time = GetMatchTime()};
	XmlRpc::SendCallback(C_XMLRPC_FlagReset, [Data.tojson()]);
}

Void SendFlagScore(CSmPlayer ScorePlayer, CSmPlayer AssistPlayer) {
	declare K_RpcCbScoreFlag Data = K_RpcCbScoreFlag{ Time = GetMatchTime(), Player = GetRpcPlayer(ScorePlayer), AssistPlayer = GetRpcPlayer(AssistPlayer), Team1Score = GetRpcTeam(1), Team2Score = GetRpcTeam(2) };
	XmlRpc::SendCallback(C_XMLRPC_FlagScored, [Data.tojson()]);
}

Void SendPlayerDeath(CSmPlayer Player) {
	declare K_RpcCbPlayer Data = K_RpcCbPlayer{Player = GetRpcPlayer(Player), Time = GetMatchTime()};
	XmlRpc::SendCallback(C_XMLRPC_PlayerDeath, [Data.tojson()]);
}

Void SendFlagPickup(CSmPlayer Player) {
	declare K_RpcCbPlayer Data = K_RpcCbPlayer{Player = GetRpcPlayer(Player), Time = GetMatchTime()};
	XmlRpc::SendCallback(C_XMLRPC_FlagPickup, [Data.tojson()]);
}

Void SendFlowEvent(Text RPCEvent) {
	declare K_RpcMap _Map;
	if (Map != Null) {
		_Map = K_RpcMap{ Name= Map.MapName, AuthorLogin = Map.AuthorLogin, AuthorName = Map.AuthorNickName };
	}
	declare K_RpcCbFlow Data = K_RpcCbFlow{Map = _Map, Team1Score = GetRpcTeam(1), Team2Score = GetRpcTeam(2), Time = GetMatchTime()};
	XmlRpc::SendCallback(RPCEvent, [Data.tojson()]);
}

Void SendPlayerFlowEvent(Text RPCEvent) {
	declare K_RpcMap _Map;
	if (Map != Null) {
		_Map = K_RpcMap{ Name= Map.MapName, AuthorLogin = Map.AuthorLogin, AuthorName = Map.AuthorNickName };
	}
	declare K_RpcPlayerScore[] _Players;
	foreach (Score in Scores) {
		_Players.add(GetRpcPlayerFromScore(Score, GetTeamFromLogin(Score.User.Login)));
	}
	declare K_RpcCbPlayerFlow Data = K_RpcCbPlayerFlow{Players = _Players, Map = _Map, Team1Score = GetRpcTeam(1), Team2Score = GetRpcTeam(2), Time = GetMatchTime()};
	XmlRpc::SendCallback(RPCEvent, [Data.tojson()]);
}