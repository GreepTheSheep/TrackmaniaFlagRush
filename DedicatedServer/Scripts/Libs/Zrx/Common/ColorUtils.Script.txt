#Include "MathLib"	as ML
#Include "ColorLib"	as CL

#Include "Libs/Zrx/Common/MathUtils.Script.txt"	as MathUtils

/**
 * Takes a color as RGB and sets it's saturation and value to a given minimum value if they are below that threshold.
 * Returns the color RGB.
 */
 Vec3 ColorToMinSaturationAndValue(Vec3 ColorRgb, Real MinSaturation, Real MinValue) {
	// Turn to HSV
	declare ColorHsv = CL::RgbToHsv(ColorRgb);
	//Adjust S & V
	ColorHsv.Y = ML::Max(ColorHsv.Y, MinSaturation);
	ColorHsv.Z = ML::Max(ColorHsv.Z, MinValue);
	// Turn back to Rgb
	declare Result = CL::HsvToRgb(ColorHsv);
	return Result;
}

/**
 * Takes a color as RGB and sets it's saturation and value to the maximum.
 * Returns the color RGB.
 */
Vec3 ColorToFullSaturationAndValue(Vec3 ColorRgb) {
	return ColorToMinSaturationAndValue(ColorRgb, 1., 1.);
}

/**
 * Computes the hue difference between two given colors.
 * Range [0.0; 1.0]
 */
Real GetHueDifference(Real Hue1, Real Hue2) {
	declare HueDifference = Hue2 - Hue1;
	// Since hue is essentially a looping value in range [0.0, 1.0] we will have to check the loop in both directions
	declare Real HueDifferenceLoop;
	if(Hue1 > Hue2) {  // Need to check loop around upper bound
		HueDifferenceLoop = (Hue2 + 1.) - Hue1;
	} else {           // Need to check loop around lowerbound
		HueDifferenceLoop = Hue2 - (Hue1 + 1.);
	}

	// Final Difference is the one which absolute is lowest (but not the absolute!)
	declare FinalHueDifference = HueDifference;
	if (ML::Abs(HueDifferenceLoop) < ML::Abs(FinalHueDifference)) {
		FinalHueDifference = HueDifferenceLoop;
	}

	return FinalHueDifference;
}

/**
 * Adjust the second color to have a minimum hue distance from the first color.
 * Returns the adjusted color.
 */
 Vec3 AdjustHueOverlap(Vec3 BaseColor, Vec3 ColorToAdjust, Real HueDifferenceThreshold) {
	declare Vec3 BaseColorHsv = CL::RgbToHsv(BaseColor);
	declare Vec3 ColorToAdjustHsv = CL::RgbToHsv(ColorToAdjust);

	declare Real HueBaseColor = BaseColorHsv.X;
	declare Real HueColorToAdjust = ColorToAdjustHsv.X;

	// Check if the difference is below a threshold (in [0.0, 0.5]) = Needs adjustments
	declare Real HueDifference = GetHueDifference(HueBaseColor, HueColorToAdjust);
	if (ML::Abs(HueDifference) < HueDifferenceThreshold) {
		// Correct the hue of team 2 in the according direction
		HueColorToAdjust = HueBaseColor + MathUtils::Sign(HueDifference) * HueDifferenceThreshold;

		// Correct HueTeam2 if out of range [0.0, 1.0] (Hue is a loop in that range)
		if (HueColorToAdjust < 0.) {
			HueColorToAdjust += 1.;
		} else if (HueColorToAdjust > 1.) {
			HueColorToAdjust -= 1.;
		}
	}

	// Return the corrected color
	declare Vec3 AdjustedColor = ColorToAdjustHsv;
	AdjustedColor.X = HueColorToAdjust;
	return CL::HsvToRgb(AdjustedColor);
}